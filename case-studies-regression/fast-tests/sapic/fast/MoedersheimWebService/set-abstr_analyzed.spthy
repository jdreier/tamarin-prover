theory SetAbst begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, fst/1, pair/2, pk/1, sign/2, snd/1, true/0,
           verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



heuristic: s i

section{* The PKI-example *}











lemma Knows_Honest_Key_imp_Revoked:
  all-traces
  "∀ sk #i #d.
    ((HonestKey( sk ) @ #i) ∧ (K( sk ) @ #d)) ⇒ (∃ #r. Revoked( sk ) @ #r)"
/*
guarded formula characterizing all counter-examples:
"∃ sk #i #d.
  (HonestKey( sk ) @ #i) ∧ (K( sk ) @ #d) ∧ ∀ #r. (Revoked( sk ) @ #r) ⇒ ⊥"
*/
simplify
solve( HonestKey( sk ) @ #i )
  case ClientKeyuserskHonestKeynskClientKeyusernsk_0_11121111
  solve( State_11121111( pki, ~nsk, user ) ▶₀ #i )
    case newnsk_0_1112111
    solve( !KU( ~nsk ) @ #vk )
      case outsk_0_1112111111111
      by contradiction /* from formulas */
    qed
  qed
next
  case HonestKeyskServerDBpkiuserpkskClientKeyusersk_0_111111111
  solve( State_111111111( ~sk, pki, user ) ▶₀ #i )
    case newsk_0_11111111
    solve( !KU( ~sk ) @ #vk )
      case outsk_0_1112111111111
      by contradiction /* from formulas */
    qed
  qed
qed



















rule (modulo E) Init[color=#ffffff, process='!', issapicrule,
                     role='Process']:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_[color=#ffffff, process='!', issapicrule,
                     role='Process']:
   [ State_( ) ] --> [ !Semistate_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_1_[color=#ffffff, process='!', issapicrule,
                     role='Process']:
   [ !Semistate_1( ) ] --> [ State_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newpki_0_1[color=#ffffff, process='new pki.1;',
                           issapicrule, role='Process']:
   [ State_1( ), Fr( pki.1 ) ] --> [ State_11( pki.1 ) ]

  /*
  rule (modulo AC) newpki_0_1[color=#ffffff, process='new pki.1;',
                              issapicrule, role='Process']:
     [ State_1( ), Fr( pki ) ] --> [ State_11( pki ) ]
  */

rule (modulo E) p_0_11[color=#ffffff, process='!', issapicrule,
                       role='Process']:
   [ State_11( pki.1 ) ] --> [ !Semistate_111( pki.1 ) ]

  /*
  rule (modulo AC) p_0_11[color=#ffffff, process='!', issapicrule,
                          role='Process']:
     [ State_11( pki ) ] --> [ !Semistate_111( pki ) ]
  */

rule (modulo E) p_1_11[color=#ffffff, process='!', issapicrule,
                       role='Process']:
   [ !Semistate_111( pki.1 ) ] --> [ State_111( pki.1 ) ]

  /*
  rule (modulo AC) p_1_11[color=#ffffff, process='!', issapicrule,
                          role='Process']:
     [ !Semistate_111( pki ) ] --> [ State_111( pki ) ]
  */

rule (modulo E) p_0_111[color=#ffffff, process='|', issapicrule,
                        role='Process']:
   [ State_111( pki.1 ) ] --> [ State_1111( pki.1 ), State_1112( pki.1 ) ]

  /*
  rule (modulo AC) p_0_111[color=#ffffff, process='|', issapicrule,
                           role='Process']:
     [ State_111( pki ) ] --> [ State_1111( pki ), State_1112( pki ) ]
  */

rule (modulo E) Server_0_1111[color=#ffffff, process='Server()',
                              issapicrule, role='Process']:
   [ State_1111( pki.1 ) ]
  -->
   [ State_11111( pki.1 ), State_11112( pki.1 ) ]

  /*
  rule (modulo AC) Server_0_1111[color=#ffffff, process='Server()',
                                 issapicrule, role='Process']:
     [ State_1111( pki ) ] --> [ State_11111( pki ), State_11112( pki ) ]
  */

rule (modulo E) p_0_11111[color=#806040, process='|', issapicrule,
                          role='Server']:
   [ State_11111( pki.1 ) ]
  -->
   [ State_111111( pki.1 ), State_111112( pki.1 ) ]

  /*
  rule (modulo AC) p_0_11111[color=#806040, process='|', issapicrule,
                             role='Server']:
     [ State_11111( pki ) ] --> [ State_111111( pki ), State_111112( pki ) ]
  */

rule (modulo E) p_0_111111[color=#806040, process='|', issapicrule,
                           role='Server']:
   [ State_111111( pki.1 ) ]
  -->
   [ State_1111111( pki.1 ), State_1111112( pki.1 ) ]

  /*
  rule (modulo AC) p_0_111111[color=#806040, process='|', issapicrule,
                              role='Server']:
     [ State_111111( pki ) ]
    -->
     [ State_1111111( pki ), State_1111112( pki ) ]
  */

rule (modulo E) innewuser_0_1111111[color=#806040,
                                    process='in(<'new', user.1>);', issapicrule, role='Server']:
   [ State_1111111( pki.1 ), In( <'new', user.1> ) ]
  -->
   [ State_11111111( pki.1, user.1 ) ]

  /*
  rule (modulo AC) innewuser_0_1111111[color=#806040,
                                       process='in(<'new', user.1>);', issapicrule, role='Server']:
     [ State_1111111( pki ), In( <'new', user> ) ]
    -->
     [ State_11111111( pki, user ) ]
  */

rule (modulo E) newsk_0_11111111[color=#806040, process='new ~sk.1;',
                                 issapicrule, role='Server']:
   [ State_11111111( pki.1, user.1 ), Fr( ~sk.1 ) ]
  -->
   [ State_111111111( ~sk.1, pki.1, user.1 ) ]

  /*
  rule (modulo AC) newsk_0_11111111[color=#806040, process='new ~sk.1;',
                                    issapicrule, role='Server']:
     [ State_11111111( pki, user ), Fr( ~sk ) ]
    -->
     [ State_111111111( ~sk, pki, user ) ]
  */

rule (modulo E) HonestKeyskServerDBpkiuserpkskClientKeyusersk_0_111111111[color=#806040,
                                                                          process=' [ ]
--[ HonestKey( ~sk.1 ) ]->
 [ ServerDB( pki.1, user.1, pk(~sk.1) ), ClientKey( user.1, ~sk.1 )
 ];',
                                                                          issapicrule, role='Server']:
   [ State_111111111( ~sk.1, pki.1, user.1 ) ]
  --[ HonestKey( ~sk.1 ) ]->
   [
   State_1111111111( ~sk.1, pki.1, user.1 ),
   ServerDB( pki.1, user.1, pk(~sk.1) ), ClientKey( user.1, ~sk.1 )
   ]

  /*
  rule (modulo AC) HonestKeyskServerDBpkiuserpkskClientKeyusersk_0_111111111[color=#806040,
                                                                             process=' [ ]
--[ HonestKey( ~sk.1 ) ]->
 [ ServerDB( pki.1, user.1, pk(~sk.1) ), ClientKey( user.1, ~sk.1 )
 ];',
                                                                             issapicrule, role='Server']:
     [ State_111111111( ~sk, pki, user ) ]
    --[ HonestKey( ~sk ) ]->
     [
     State_1111111111( ~sk, pki, user ), ServerDB( pki, user, pk(~sk) ),
     ClientKey( user, ~sk )
     ]
  */

rule (modulo E) outpksk_0_1111111111[color=#806040,
                                     process='out(pk(~sk.1));', issapicrule, role='Server']:
   [ State_1111111111( ~sk.1, pki.1, user.1 ) ]
  -->
   [ State_11111111111( ~sk.1, pki.1, user.1 ), Out( pk(~sk.1) ) ]

  /*
  rule (modulo AC) outpksk_0_1111111111[color=#806040,
                                        process='out(pk(~sk.1));', issapicrule, role='Server']:
     [ State_1111111111( ~sk, pki, user ) ]
    -->
     [ State_11111111111( ~sk, pki, user ), Out( pk(~sk) ) ]
  */

rule (modulo E) p_0_11111111111[color=#806040, process='0', issapicrule,
                                role='Server']:
   [ State_11111111111( ~sk.1, pki.1, user.1 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_11111111111[color=#806040, process='0', issapicrule,
                                   role='Server']:
     [ State_11111111111( ~sk, pki, user ) ] --> [ ]
  */

rule (modulo E) inusersk_0_1111112[color=#806040,
                                   process='in(<user.2, sk.2>);', issapicrule, role='Server']:
   [ State_1111112( pki.1 ), In( <user.2, sk.2> ) ]
  -->
   [ State_11111121( pki.1, sk.2, user.2 ) ]

  /*
  rule (modulo AC) inusersk_0_1111112[color=#806040,
                                      process='in(<user.2, sk.2>);', issapicrule, role='Server']:
     [ State_1111112( pki ), In( <user, sk> ) ]
    -->
     [ State_11111121( pki, sk, user ) ]
  */

rule (modulo E) ServerDBpkiuserpksk_0_11111121[color=#806040,
                                               process=' [ ] --> [ ServerDB( pki.1, user.2, pk(sk.2) ) ];',
                                               issapicrule, role='Server']:
   [ State_11111121( pki.1, sk.2, user.2 ) ]
  -->
   [
   State_111111211( pki.1, sk.2, user.2 ),
   ServerDB( pki.1, user.2, pk(sk.2) )
   ]

  /*
  rule (modulo AC) ServerDBpkiuserpksk_0_11111121[color=#806040,
                                                  process=' [ ] --> [ ServerDB( pki.1, user.2, pk(sk.2) ) ];',
                                                  issapicrule, role='Server']:
     [ State_11111121( pki, sk, user ) ]
    -->
     [ State_111111211( pki, sk, user ), ServerDB( pki, user, pk(sk) ) ]
  */

rule (modulo E) p_0_111111211[color=#806040, process='0', issapicrule,
                              role='Server']:
   [ State_111111211( pki.1, sk.2, user.2 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_111111211[color=#806040, process='0', issapicrule,
                                 role='Server']:
     [ State_111111211( pki, sk, user ) ] --> [ ]
  */

rule (modulo E) inrenewuserpknsk_0_111112[color=#806040,
                                          process='in(<'renew', user.3, pk(nsk.1)>);', issapicrule,
                                          role='Server']:
   [ State_111112( pki.1 ), In( <'renew', user.3, pk(nsk.1)> ) ]
  -->
   [ State_1111121( nsk.1, pki.1, user.3 ) ]

  /*
  rule (modulo AC) inrenewuserpknsk_0_111112[color=#806040,
                                             process='in(<'renew', user.3, pk(nsk.1)>);', issapicrule,
                                             role='Server']:
     [ State_111112( pki ), In( <'renew', user, pk(nsk)> ) ]
    -->
     [ State_1111121( nsk, pki, user ) ]
  */

rule (modulo E) insignrenewuserpknsksk_0_1111121[color=#806040,
                                                 process='in(sign(<'renew', =user.3, pk(=nsk.1)>, sk.3));',
                                                 issapicrule, role='Server']:
   [
   State_1111121( nsk.1, pki.1, user.3 ),
   In( sign(<'renew', user.3, pk(nsk.1)>, sk.3) )
   ]
  -->
   [ State_11111211( nsk.1, pki.1, sk.3, user.3 ) ]

  /*
  rule (modulo AC) insignrenewuserpknsksk_0_1111121[color=#806040,
                                                    process='in(sign(<'renew', =user.3, pk(=nsk.1)>, sk.3));',
                                                    issapicrule, role='Server']:
     [
     State_1111121( nsk, pki, user ), In( sign(<'renew', user, pk(nsk)>, sk) )
     ]
    -->
     [ State_11111211( nsk, pki, sk, user ) ]
  */

rule (modulo E) ServerDBpkiuserpkskServerDBpkiuserpknsk_0_11111211[color=#806040,
                                                                   process=' [ ServerDB( pki.1, user.3, pk(sk.3) ) ]
-->
 [ ServerDB( pki.1, user.3, pk(nsk.1) ) ];',
                                                                   issapicrule, role='Server']:
   [
   State_11111211( nsk.1, pki.1, sk.3, user.3 ),
   ServerDB( pki.1, user.3, pk(sk.3) )
   ]
  -->
   [
   State_111112111( nsk.1, pki.1, sk.3, user.3 ),
   ServerDB( pki.1, user.3, pk(nsk.1) )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) ServerDBpkiuserpkskServerDBpkiuserpknsk_0_11111211[color=#806040,
                                                                      process=' [ ServerDB( pki.1, user.3, pk(sk.3) ) ]
-->
 [ ServerDB( pki.1, user.3, pk(nsk.1) ) ];',
                                                                      issapicrule, role='Server']:
     [ State_11111211( nsk, pki, sk, user ), ServerDB( pki, user, pk(sk) ) ]
    -->
     [ State_111112111( nsk, pki, sk, user ), ServerDB( pki, user, pk(nsk) ) ]
    // loop breaker: [1]
  */

rule (modulo E) outsignconfirmsignrenewuserpknskskpki_0_111112111[color=#806040,
                                                                  process='out(sign(<'confirm', sign(<'renew', user.3, pk(nsk.1)>, sk.3)>, pki.1));',
                                                                  issapicrule, role='Server']:
   [ State_111112111( nsk.1, pki.1, sk.3, user.3 ) ]
  -->
   [
   State_1111121111( nsk.1, pki.1, sk.3, user.3 ),
   Out( sign(<'confirm', sign(<'renew', user.3, pk(nsk.1)>, sk.3)>, pki.1) )
   ]

  /*
  rule (modulo AC) outsignconfirmsignrenewuserpknskskpki_0_111112111[color=#806040,
                                                                     process='out(sign(<'confirm', sign(<'renew', user.3, pk(nsk.1)>, sk.3)>, pki.1));',
                                                                     issapicrule, role='Server']:
     [ State_111112111( nsk, pki, sk, user ) ]
    -->
     [
     State_1111121111( nsk, pki, sk, user ),
     Out( sign(<'confirm', sign(<'renew', user, pk(nsk)>, sk)>, pki) )
     ]
  */

rule (modulo E) p_0_1111121111[color=#806040, process='0', issapicrule,
                               role='Server']:
   [ State_1111121111( nsk.1, pki.1, sk.3, user.3 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_1111121111[color=#806040, process='0', issapicrule,
                                  role='Server']:
     [ State_1111121111( nsk, pki, sk, user ) ] --> [ ]
  */

rule (modulo E) p_0_11112[color=#ffffff, process='0', issapicrule,
                          role='Process']:
   [ State_11112( pki.1 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_11112[color=#ffffff, process='0', issapicrule,
                             role='Process']:
     [ State_11112( pki ) ] --> [ ]
  */

rule (modulo E) newuser_0_1112[color=#ffffff, process='new user.4;',
                               issapicrule, role='Process']:
   [ State_1112( pki.1 ), Fr( user.4 ) ]
  -->
   [ State_11121( pki.1, user.4 ) ]

  /*
  rule (modulo AC) newuser_0_1112[color=#ffffff, process='new user.4;',
                                  issapicrule, role='Process']:
     [ State_1112( pki ), Fr( user ) ] --> [ State_11121( pki, user ) ]
  */

rule (modulo E) p_0_11121[color=#ffffff, process='!', issapicrule,
                          role='Process']:
   [ State_11121( pki.1, user.4 ) ]
  -->
   [ !Semistate_111211( pki.1, user.4 ) ]

  /*
  rule (modulo AC) p_0_11121[color=#ffffff, process='!', issapicrule,
                             role='Process']:
     [ State_11121( pki, user ) ] --> [ !Semistate_111211( pki, user ) ]
  */

rule (modulo E) p_1_11121[color=#ffffff, process='!', issapicrule,
                          role='Process']:
   [ !Semistate_111211( pki.1, user.4 ) ]
  -->
   [ State_111211( pki.1, user.4 ) ]

  /*
  rule (modulo AC) p_1_11121[color=#ffffff, process='!', issapicrule,
                             role='Process']:
     [ !Semistate_111211( pki, user ) ] --> [ State_111211( pki, user ) ]
  */

rule (modulo E) Client_0_111211[color=#ffffff, process='Client()',
                                issapicrule, role='Process']:
   [ State_111211( pki.1, user.4 ) ]
  -->
   [ State_1112111( pki.1, user.4 ), State_1112112( pki.1, user.4 ) ]

  /*
  rule (modulo AC) Client_0_111211[color=#ffffff, process='Client()',
                                   issapicrule, role='Process']:
     [ State_111211( pki, user ) ]
    -->
     [ State_1112111( pki, user ), State_1112112( pki, user ) ]
  */

rule (modulo E) newnsk_0_1112111[color=#518040, process='new ~nsk.2;',
                                 issapicrule, role='Client']:
   [ State_1112111( pki.1, user.4 ), Fr( ~nsk.2 ) ]
  -->
   [ State_11121111( pki.1, ~nsk.2, user.4 ) ]

  /*
  rule (modulo AC) newnsk_0_1112111[color=#518040, process='new ~nsk.2;',
                                    issapicrule, role='Client']:
     [ State_1112111( pki, user ), Fr( ~nsk ) ]
    -->
     [ State_11121111( pki, ~nsk, user ) ]
  */

rule (modulo E) ClientKeyuserskHonestKeynskClientKeyusernsk_0_11121111[color=#518040,
                                                                       process=' [ ClientKey( user.4, ~sk.4 ) ]
--[ HonestKey( ~nsk.2 ) ]->
 [ ClientKey( user.4, ~nsk.2 ) ];',
                                                                       issapicrule, role='Client']:
   [ State_11121111( pki.1, ~nsk.2, user.4 ), ClientKey( user.4, ~sk.4 ) ]
  --[ HonestKey( ~nsk.2 ) ]->
   [
   State_111211111( pki.1, ~nsk.2, ~sk.4, user.4 ),
   ClientKey( user.4, ~nsk.2 )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) ClientKeyuserskHonestKeynskClientKeyusernsk_0_11121111[color=#518040,
                                                                          process=' [ ClientKey( user.4, ~sk.4 ) ]
--[ HonestKey( ~nsk.2 ) ]->
 [ ClientKey( user.4, ~nsk.2 ) ];',
                                                                          issapicrule, role='Client']:
     [ State_11121111( pki, ~nsk, user ), ClientKey( user, ~sk ) ]
    --[ HonestKey( ~nsk ) ]->
     [ State_111211111( pki, ~nsk, ~sk, user ), ClientKey( user, ~nsk ) ]
    // loop breaker: [1]
  */

rule (modulo E) outrenewuserpknsk_0_111211111[color=#518040,
                                              process='out(<'renew', user.4, pk(~nsk.2)>);', issapicrule,
                                              role='Client']:
   [ State_111211111( pki.1, ~nsk.2, ~sk.4, user.4 ) ]
  -->
   [
   State_1112111111( pki.1, ~nsk.2, ~sk.4, user.4 ),
   Out( <'renew', user.4, pk(~nsk.2)> )
   ]

  /*
  rule (modulo AC) outrenewuserpknsk_0_111211111[color=#518040,
                                                 process='out(<'renew', user.4, pk(~nsk.2)>);', issapicrule,
                                                 role='Client']:
     [ State_111211111( pki, ~nsk, ~sk, user ) ]
    -->
     [
     State_1112111111( pki, ~nsk, ~sk, user ),
     Out( <'renew', user, pk(~nsk)> )
     ]
  */

rule (modulo E) outsignrenewuserpknsksk_0_1112111111[color=#518040,
                                                     process='out(sign(<'renew', user.4, pk(~nsk.2)>, ~sk.4));',
                                                     issapicrule, role='Client']:
   [ State_1112111111( pki.1, ~nsk.2, ~sk.4, user.4 ) ]
  -->
   [
   State_11121111111( pki.1, ~nsk.2, ~sk.4, user.4 ),
   Out( sign(<'renew', user.4, pk(~nsk.2)>, ~sk.4) )
   ]

  /*
  rule (modulo AC) outsignrenewuserpknsksk_0_1112111111[color=#518040,
                                                        process='out(sign(<'renew', user.4, pk(~nsk.2)>, ~sk.4));',
                                                        issapicrule, role='Client']:
     [ State_1112111111( pki, ~nsk, ~sk, user ) ]
    -->
     [
     State_11121111111( pki, ~nsk, ~sk, user ),
     Out( sign(<'renew', user, pk(~nsk)>, ~sk) )
     ]
  */

rule (modulo E) insignconfirmsignrenewuserpknskskpki_0_11121111111[color=#518040,
                                                                   process='in(sign(<'confirm', sign(<'renew', =user.4, pk(=~nsk.2)>, =~sk.4)>,
     =pki.1));',
                                                                   issapicrule, role='Client']:
   [
   State_11121111111( pki.1, ~nsk.2, ~sk.4, user.4 ),
   In( sign(<'confirm', sign(<'renew', user.4, pk(~nsk.2)>, ~sk.4)>, pki.1)
   )
   ]
  -->
   [ State_111211111111( pki.1, ~nsk.2, ~sk.4, user.4 ) ]

  /*
  rule (modulo AC) insignconfirmsignrenewuserpknskskpki_0_11121111111[color=#518040,
                                                                      process='in(sign(<'confirm', sign(<'renew', =user.4, pk(=~nsk.2)>, =~sk.4)>,
     =pki.1));',
                                                                      issapicrule, role='Client']:
     [
     State_11121111111( pki, ~nsk, ~sk, user ),
     In( sign(<'confirm', sign(<'renew', user, pk(~nsk)>, ~sk)>, pki) )
     ]
    -->
     [ State_111211111111( pki, ~nsk, ~sk, user ) ]
  */

rule (modulo E) eventRevokedsk_0_111211111111[color=#518040,
                                              process='event Revoked( ~sk.4 );', issapicrule, role='Client']:
   [ State_111211111111( pki.1, ~nsk.2, ~sk.4, user.4 ) ]
  --[ Revoked( ~sk.4 ) ]->
   [ State_1112111111111( pki.1, ~nsk.2, ~sk.4, user.4 ) ]

  /*
  rule (modulo AC) eventRevokedsk_0_111211111111[color=#518040,
                                                 process='event Revoked( ~sk.4 );', issapicrule,
                                                 role='Client']:
     [ State_111211111111( pki, ~nsk, ~sk, user ) ]
    --[ Revoked( ~sk ) ]->
     [ State_1112111111111( pki, ~nsk, ~sk, user ) ]
  */

rule (modulo E) outsk_0_1112111111111[color=#518040,
                                      process='out(~sk.4);', issapicrule, role='Client']:
   [ State_1112111111111( pki.1, ~nsk.2, ~sk.4, user.4 ) ]
  -->
   [ State_11121111111111( pki.1, ~nsk.2, ~sk.4, user.4 ), Out( ~sk.4 ) ]

  /*
  rule (modulo AC) outsk_0_1112111111111[color=#518040,
                                         process='out(~sk.4);', issapicrule, role='Client']:
     [ State_1112111111111( pki, ~nsk, ~sk, user ) ]
    -->
     [ State_11121111111111( pki, ~nsk, ~sk, user ), Out( ~sk ) ]
  */

rule (modulo E) p_0_11121111111111[color=#518040, process='0',
                                   issapicrule, role='Client']:
   [ State_11121111111111( pki.1, ~nsk.2, ~sk.4, user.4 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_11121111111111[color=#518040, process='0',
                                      issapicrule, role='Client']:
     [ State_11121111111111( pki, ~nsk, ~sk, user ) ] --> [ ]
  */

rule (modulo E) p_0_1112112[color=#ffffff, process='0', issapicrule,
                            role='Process']:
   [ State_1112112( pki.1, user.4 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_1112112[color=#ffffff, process='0', issapicrule,
                               role='Process']:
     [ State_1112112( pki, user ) ] --> [ ]
  */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/*
WARNING: the following wellformedness checks failed!

Message Derivation Checks
=========================

  The variables of the following rule(s) are not derivable from their premises, you may be performing unintended pattern matching.

Rule inrenewuserpknsk_0_111112: 
Failed to derive Variable(s): nsk.1

Rule insignrenewuserpknsksk_0_1111121: 
Failed to derive Variable(s): sk.3
*/

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.4
Git revision: d224b4b965f014cbf18a3a01c5afbd5b20576914 (with uncommited changes), branch: develop
Compiled at: 2025-09-08 09:04:28.158015016 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/MoedersheimWebService/set-abstr.spthy

  output:          examples/sapic/fast/MoedersheimWebService/set-abstr.spthy.tmp
  processing time: 1.93s
  
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  Knows_Honest_Key_imp_Revoked (all-traces): verified (8 steps)

==============================================================================
*/
