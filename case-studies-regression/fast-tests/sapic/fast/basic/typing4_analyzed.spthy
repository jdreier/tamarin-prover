theory Typing begin

// Function signature and definition of the equational theory E

builtins: multiset
functions: f/1, fst/1, g/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



heuristic: p





lemma sanity:
  exists-trace "∃ x y #i. (Run( x, y ) @ #i) ∧ (¬(x = y))"
/*
guarded formula characterizing all satisfying traces:
"∃ x y #i. (Run( x, y ) @ #i) ∧ ¬(x = y)"
*/
simplify
solve( State_211( x, y ) ▶₀ #i )
  case newxlol_0_21
  SOLVED // trace found
qed













rule (modulo E) Init[color=#ffffff, process='|', issapicrule,
                     role='Process']:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) p_0_[color=#ffffff, process='|', issapicrule,
                     role='Process']:
   [ State_( ) ] --> [ State_1( ), State_2( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newxlol_0_1[color=#ffffff, process='new x.2:lol;',
                            issapicrule, role='Process']:
   [ State_1( ), Fr( x.2 ) ] --> [ State_11( x.2 ) ]

  /*
  rule (modulo AC) newxlol_0_1[color=#ffffff, process='new x.2:lol;',
                               issapicrule, role='Process']:
     [ State_1( ), Fr( x ) ] --> [ State_11( x ) ]
  */

rule (modulo E) outxlol_0_11[color=#ffffff, process='out(x.2:lol);',
                             issapicrule, role='Process']:
   [ State_11( x.2 ) ] --> [ State_111( x.2 ), Out( x.2 ) ]

  /*
  rule (modulo AC) outxlol_0_11[color=#ffffff, process='out(x.2:lol);',
                                issapicrule, role='Process']:
     [ State_11( x ) ] --> [ State_111( x ), Out( x ) ]
  */

rule (modulo E) p_0_111[color=#ffffff, process='0', issapicrule,
                        role='Process']:
   [ State_111( x.2 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_111[color=#ffffff, process='0', issapicrule,
                           role='Process']:
     [ State_111( x ) ] --> [ ]
  */

rule (modulo E) newxlol_0_2[color=#ffffff, process='new x.3:lol;',
                            issapicrule, role='Process']:
   [ State_2( ), Fr( x.3 ) ] --> [ State_21( x.3 ) ]

  /*
  rule (modulo AC) newxlol_0_2[color=#ffffff, process='new x.3:lol;',
                               issapicrule, role='Process']:
     [ State_2( ), Fr( x ) ] --> [ State_21( x ) ]
  */

rule (modulo E) newxlol_0_21[color=#ffffff, process='new x.4:lol;',
                             issapicrule, role='Process']:
   [ State_21( x.3 ), Fr( x.4 ) ] --> [ State_211( x.3, x.4 ) ]

  /*
  rule (modulo AC) newxlol_0_21[color=#ffffff, process='new x.4:lol;',
                                issapicrule, role='Process']:
     [ State_21( x ), Fr( x.1 ) ] --> [ State_211( x, x.1 ) ]
  */

rule (modulo E) eventRunxlolxlol_0_211[color=#ffffff,
                                       process='event Run( x.3:lol, x.4:lol );', issapicrule, role='Process']:
   [ State_211( x.3, x.4 ) ]
  --[ Run( x.3, x.4 ) ]->
   [ State_2111( x.3, x.4 ) ]

  /*
  rule (modulo AC) eventRunxlolxlol_0_211[color=#ffffff,
                                          process='event Run( x.3:lol, x.4:lol );', issapicrule,
                                          role='Process']:
     [ State_211( x, x.1 ) ] --[ Run( x, x.1 ) ]-> [ State_2111( x, x.1 ) ]
  */

rule (modulo E) outxlolxlol_0_2111[color=#ffffff,
                                   process='out(<x.3:lol, x.4:lol>);', issapicrule, role='Process']:
   [ State_2111( x.3, x.4 ) ]
  -->
   [ State_21111( x.3, x.4 ), Out( <x.3, x.4> ) ]

  /*
  rule (modulo AC) outxlolxlol_0_2111[color=#ffffff,
                                      process='out(<x.3:lol, x.4:lol>);', issapicrule, role='Process']:
     [ State_2111( x, x.1 ) ] --> [ State_21111( x, x.1 ), Out( <x, x.1> ) ]
  */

rule (modulo E) p_0_21111[color=#ffffff, process='0', issapicrule,
                          role='Process']:
   [ State_21111( x.3, x.4 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_21111[color=#ffffff, process='0', issapicrule,
                             role='Process']:
     [ State_21111( x, x.1 ) ] --> [ ]
  */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.4
Git revision: d224b4b965f014cbf18a3a01c5afbd5b20576914 (with uncommited changes), branch: develop
Compiled at: 2025-09-08 09:04:28.158015016 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/basic/typing4.spthy

  output:          examples/sapic/fast/basic/typing4.spthy.tmp
  processing time: 0.23s
  
  sanity (exists-trace): verified (3 steps)

==============================================================================
*/
