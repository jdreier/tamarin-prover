theory AssImmediateChannelIn begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



heuristic: p



lemma intuitiveTest:
  all-traces "∀ #a. (A( ) @ #a) ⇒ (∃ #i x. (K( x ) @ #i) ∧ (#i < #a))"
/*
guarded formula characterizing all counter-examples:
"∃ #a. (A( ) @ #a) ∧ ∀ #i x. (K( x ) @ #i) ⇒ ¬(#i < #a)"
*/
simplify
solve( State_111( x ) ▶₀ #a )
  case inx_1_11
  by contradiction /* from formulas */
qed







rule (modulo E) Init[color=#ffffff, process='new x.1;', issapicrule,
                     role='Process']:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newx_0_[color=#ffffff, process='new x.1;', issapicrule,
                        role='Process']:
   [ State_( ), Fr( x.1 ) ] --> [ State_1( x.1 ) ]

  /*
  rule (modulo AC) newx_0_[color=#ffffff, process='new x.1;', issapicrule,
                           role='Process']:
     [ State_( ), Fr( x ) ] --> [ State_1( x ) ]
  */

rule (modulo E) outx_0_1[color=#ffffff, process='out(x.1);', issapicrule,
                         role='Process']:
   [ State_1( x.1 ) ] --> [ State_11( x.1 ), Out( x.1 ) ]

  /*
  rule (modulo AC) outx_0_1[color=#ffffff, process='out(x.1);',
                            issapicrule, role='Process']:
     [ State_1( x ) ] --> [ State_11( x ), Out( x ) ]
  */

rule (modulo E) inx_0_11[color=#ffffff, process='in(=x.1);', issapicrule,
                         role='Process']:
   [ State_11( x.1 ), In( x.2 ) ]
  --[ ChannelIn( x.2 ) ]->
   [ Let_111( x.2, x.1 ) ]

  /*
  rule (modulo AC) inx_0_11[color=#ffffff, process='in(=x.1);',
                            issapicrule, role='Process']:
     [ State_11( x ), In( x.1 ) ]
    --[ ChannelIn( x.1 ) ]->
     [ Let_111( x.1, x ) ]
  */

rule (modulo E) inx_1_11[color=#ffffff, process='in(=x.1);', issapicrule,
                         role='Process']:
   [ Let_111( x.1, x.1 ) ] --> [ State_111( x.1 ) ]

  /*
  rule (modulo AC) inx_1_11[color=#ffffff, process='in(=x.1);',
                            issapicrule, role='Process']:
     [ Let_111( x, x ) ] --> [ State_111( x ) ]
  */

rule (modulo E) eventA_0_111[color=#ffffff, process='event A( );',
                             issapicrule, role='Process']:
   [ State_111( x.1 ) ] --[ A( ), Event( ) ]-> [ State_1111( x.1 ) ]

  /*
  rule (modulo AC) eventA_0_111[color=#ffffff, process='event A( );',
                                issapicrule, role='Process']:
     [ State_111( x ) ] --[ A( ), Event( ) ]-> [ State_1111( x ) ]
  */

rule (modulo E) p_0_1111[color=#ffffff, process='0', issapicrule,
                         role='Process']:
   [ State_1111( x.1 ) ] --> [ ]

  /*
  rule (modulo AC) p_0_1111[color=#ffffff, process='0', issapicrule,
                            role='Process']:
     [ State_1111( x ) ] --> [ ]
  */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction in_event:
  "∀ x #t3.
    (ChannelIn( x ) @ #t3) ⇒
    (∃ #t2.
      (((K( x ) @ #t2) ∧ (#t2 < #t3)) ∧
       (∀ #t1. (Event( ) @ #t1) ⇒ ((#t1 < #t2) ∨ (#t3 < #t1)))) ∧
      (∀ #t1 xp.
        (K( xp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.4
Git revision: d224b4b965f014cbf18a3a01c5afbd5b20576914 (with uncommited changes), branch: develop
Compiled at: 2025-09-08 09:04:28.158015016 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-ass-immediate/test-channelin.spthy

  output:          examples/sapic/fast/feature-ass-immediate/test-channelin.spthy.tmp
  processing time: 0.13s
  
  intuitiveTest (all-traces): verified (3 steps)

==============================================================================
*/
