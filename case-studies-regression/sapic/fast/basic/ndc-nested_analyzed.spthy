theory nestedNDC begin

// Function signature and definition of the equational theory E

functions: fst/1, h/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



heuristic: p

section{* small example for progression function *}









lemma A_possible:
  exists-trace "∃ #t. A( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (A( ) @ #t)"
*/
simplify
solve( State_( ~prog_ ) ▶₀ #t )
  case Init
  solve( (∃ #t. (ProgressTo_11( ~prog_ ) @ #t))  ∥
         (∃ #t. (ProgressTo_211( ~prog_ ) @ #t))  ∥
         (∃ #t. (ProgressTo_221( ~prog_ ) @ #t)) )
    case case_1
    solve( State_( ~prog_ ) ▶₀ #t.2 )
      case Init
      SOLVED // trace found
    qed
  qed
qed

lemma B_possible:
  exists-trace "∃ #t. B( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (B( ) @ #t)"
*/
simplify
solve( State_( ~prog_ ) ▶₀ #t )
  case Init
  solve( (∃ #t. (ProgressTo_11( ~prog_ ) @ #t))  ∥
         (∃ #t. (ProgressTo_211( ~prog_ ) @ #t))  ∥
         (∃ #t. (ProgressTo_221( ~prog_ ) @ #t)) )
    case case_2
    solve( State_( ~prog_ ) ▶₀ #t.2 )
      case Init
      SOLVED // trace found
    qed
  qed
qed

lemma C_possible:
  exists-trace "∃ #t. C( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (C( ) @ #t)"
*/
simplify
solve( State_( ~prog_ ) ▶₀ #t )
  case Init
  solve( (∃ #t. (ProgressTo_11( ~prog_ ) @ #t))  ∥
         (∃ #t. (ProgressTo_211( ~prog_ ) @ #t))  ∥
         (∃ #t. (ProgressTo_221( ~prog_ ) @ #t)) )
    case case_3
    solve( State_( ~prog_ ) ▶₀ #t.2 )
      case Init
      SOLVED // trace found
    qed
  qed
qed

lemma no_progress_possible:
  exists-trace "(¬(∃ #t. A( ) @ #t)) ∧ (¬(∃ #t. B( ) @ #t))"
/*
guarded formula characterizing all satisfying traces:
"(∀ #t. (A( ) @ #t) ⇒ ⊥) ∧ (∀ #t. (B( ) @ #t) ⇒ ⊥)"
*/
simplify
solve( (∃ #t. (ProgressTo_11( ~prog_ ) @ #t))  ∥
       (∃ #t. (ProgressTo_211( ~prog_ ) @ #t))  ∥
       (∃ #t. (ProgressTo_221( ~prog_ ) @ #t)) )
  case case_3
  solve( State_( ~prog_ ) ▶₀ #t.1 )
    case Init
    SOLVED // trace found
  qed
qed

lemma A_excludesBC:
  all-traces
  "(∃ #t. A( ) @ #t) ⇒ ((¬(∃ #t2. B( ) @ #t2)) ∧ (¬(∃ #t2. C( ) @ #t2)))"
/*
guarded formula characterizing all counter-examples:
"(∃ #t. (A( ) @ #t)) ∧ (((∃ #t2. (B( ) @ #t2)) ∨ (∃ #t2. (C( ) @ #t2))))"
*/
simplify
solve( (∃ #t2. (B( ) @ #t2))  ∥ (∃ #t2. (C( ) @ #t2)) )
  case case_1
  solve( State_( ~prog_ ) ▶₀ #t )
    case Init
    by solve( State_( ~prog_.1 ) ▶₀ #t2 )
  qed
next
  case case_2
  solve( State_( ~prog_ ) ▶₀ #t )
    case Init
    by solve( State_( ~prog_.1 ) ▶₀ #t2 )
  qed
qed

lemma B_excludesAC:
  all-traces
  "(∃ #t. B( ) @ #t) ⇒ ((¬(∃ #t2. A( ) @ #t2)) ∧ (¬(∃ #t2. C( ) @ #t2)))"
/*
guarded formula characterizing all counter-examples:
"(∃ #t. (B( ) @ #t)) ∧ (((∃ #t2. (A( ) @ #t2)) ∨ (∃ #t2. (C( ) @ #t2))))"
*/
simplify
solve( (∃ #t2. (A( ) @ #t2))  ∥ (∃ #t2. (C( ) @ #t2)) )
  case case_1
  solve( State_( ~prog_ ) ▶₀ #t )
    case Init
    by solve( State_( ~prog_.1 ) ▶₀ #t2 )
  qed
next
  case case_2
  solve( State_( ~prog_ ) ▶₀ #t )
    case Init
    by solve( State_( ~prog_.1 ) ▶₀ #t2 )
  qed
qed

lemma C_excludesAC:
  all-traces
  "(∃ #t. C( ) @ #t) ⇒ ((¬(∃ #t2. A( ) @ #t2)) ∧ (¬(∃ #t2. B( ) @ #t2)))"
/*
guarded formula characterizing all counter-examples:
"(∃ #t. (C( ) @ #t)) ∧ (((∃ #t2. (A( ) @ #t2)) ∨ (∃ #t2. (B( ) @ #t2))))"
*/
simplify
solve( (∃ #t2. (A( ) @ #t2))  ∥ (∃ #t2. (B( ) @ #t2)) )
  case case_1
  solve( State_( ~prog_ ) ▶₀ #t )
    case Init
    by solve( State_( ~prog_.1 ) ▶₀ #t2 )
  qed
next
  case case_2
  solve( State_( ~prog_ ) ▶₀ #t )
    case Init
    by solve( State_( ~prog_.1 ) ▶₀ #t2 )
  qed
qed

lemma oneEventAlways:
  all-traces "((∃ #t. A( ) @ #t) ∨ (∃ #t. B( ) @ #t)) ∨ (∃ #t. C( ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"(∀ #t. (A( ) @ #t) ⇒ ⊥) ∧
 (∀ #t. (B( ) @ #t) ⇒ ⊥) ∧
 (∀ #t. (C( ) @ #t) ⇒ ⊥)"
*/
simplify
solve( (∃ #t. (ProgressTo_11( ~prog_ ) @ #t))  ∥
       (∃ #t. (ProgressTo_211( ~prog_ ) @ #t))  ∥
       (∃ #t. (ProgressTo_221( ~prog_ ) @ #t)) )
  case case_1
  by contradiction /* from formulas */
next
  case case_2
  by contradiction /* from formulas */
next
  case case_3
  by contradiction /* from formulas */
qed

















rule (modulo E) MessageIDRule[color=#ffffff, process="+", issapicrule,
                              role='Process']:
   [ Fr( ~mid_ ) ] --> [ MID_Receiver( ~mid_ ), MID_Sender( ~mid_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init[color=#ffffff, process="+", issapicrule,
                     role='Process']:
   [ Fr( ~prog_ ) ]
  --[ ProgressFrom_( ~prog_ ), Init( ) ]->
   [ State_( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventA_0_1[color=#ffffff, process="0", issapicrule,
                           role='Process']:
   [ State_( ~prog_ ) ] --[ ProgressTo_11( ~prog_ ), A( ) ]-> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventB_0_21[color=#ffffff, process="0", issapicrule,
                            role='Process']:
   [ State_( ~prog_ ) ] --[ ProgressTo_211( ~prog_ ), B( ) ]-> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) eventC_0_22[color=#ffffff, process="0", issapicrule,
                            role='Process']:
   [ State_( ~prog_ ) ] --[ ProgressTo_221( ~prog_ ), C( ) ]-> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction Progress__to_11_or_211_or_221:
  "∀ prog_ #t.
    (ProgressFrom_( prog_ ) @ #t) ⇒
    ((∃ #t.1. ProgressTo_11( prog_ ) @ #t.1) ∨
     ((∃ #t.1. ProgressTo_211( prog_ ) @ #t.1) ∨
      (∃ #t.1. ProgressTo_221( prog_ ) @ #t.1)))"

restriction progressInit:
  "∃ #t. Init( ) @ #t"

/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.4
Git revision: a288673cab40b1e997ba23b077ef491d39c2bef6 (with uncommited changes), branch: fix-issue713
Compiled at: 2025-06-18 14:31:09.981542 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/basic/ndc-nested.spthy

  output:          examples/sapic/fast/basic/ndc-nested.spthy.tmp
  processing time: 0.09s
  
  A_possible (exists-trace): verified (5 steps)
  B_possible (exists-trace): verified (5 steps)
  C_possible (exists-trace): verified (5 steps)
  no_progress_possible (exists-trace): verified (4 steps)
  A_excludesBC (all-traces): verified (6 steps)
  B_excludesAC (all-traces): verified (6 steps)
  C_excludesAC (all-traces): verified (6 steps)
  oneEventAlways (all-traces): verified (5 steps)

==============================================================================
*/
