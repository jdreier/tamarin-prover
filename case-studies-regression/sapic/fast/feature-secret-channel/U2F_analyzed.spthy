theory U2F begin

// Function signature and definition of the equational theory E

functions: checksign/2, fst/1, getmess/1, pair/2, pk/1, sign/2, snd/1,
           succ/1
equations:
    checksign(sign(m, k), pk(k)) = m,
    fst(<x.1, x.2>) = x.1,
    getmess(sign(m, k)) = m,
    snd(<x.1, x.2>) = x.2



heuristic: p











lemma auth [reuse, use_induction]:
  all-traces
  "∀ #i cnt.
    (ServerAccept( cnt ) @ #i) ⇒ (∃ #j cntb. UserInit( cntb ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ #i cnt.
  (ServerAccept( cnt ) @ #i) ∧ ∀ #j cntb. (UserInit( cntb ) @ #j) ⇒ ⊥"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  solve( (∀ #i cnt.
           (ServerAccept( cnt ) @ #i)
          ⇒
           ((last(#i)) ∨ (∃ #j cntb. (UserInit( cntb ) @ #j) ∧ ¬(last(#j)))))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t1 yp.
                (Insert( x, yp ) @ #t1)
               ∧
                (¬(last(#t1))) ∧
                (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                (¬(#t1 = #t2)) ∧
                (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_0( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_1( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3))) )
    case case_1
    solve( (last(#i))  ∥ (∃ #j cntb. (UserInit( cntb ) @ #j) ∧ ¬(last(#j))) )
      case case_1
      solve( State_111111111111111111111( lock, ~btn, ~kb, ~tls, ~u2f, chall,
                                          cnt, log, pass, signed, u2fkey
             ) ▶₀ #i )
        case lookupEvServerascnt_0_11111111111111111111_case_1
        solve( (#vr.22 < #t2)  ∥ (#vr.22 = #t2) )
          case case_1
          solve( State_11111111111111111( ~btn, ~kb, ~tls, ~u2f, chall, log, pass,
                                          u2fkey
                 ) ▶₀ #vr.4 )
            case outtlschannelchallbitstring_1_1111111111111111_case_1
            solve( Message( ~u2f.1, sign(<log, pass, ~n.1>, u2fkey) ) ▶₁ #vr.7 )
              case outufchannelsignpayloadbitstringufkey_0_1111111111121111
              solve( Ack( ~u2f.1, <lg, pss, chall> ) ▶₁ #vr.8 )
                case intlschannelsignedbitstring_0_11111111111111111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelpayloadbitstring_0_1111111111121
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelsignedbitstring_0_111111111111211111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case outtlschannelchallbitstring_1_1111111111111111_case_2
            solve( Message( ~u2f.1, sign(<log, pass, ~n.1>, u2fkey) ) ▶₁ #vr.7 )
              case outufchannelsignpayloadbitstringufkey_0_1111111111121111
              solve( Ack( ~u2f.1, <lg, pss, chall> ) ▶₁ #vr.8 )
                case intlschannelsignedbitstring_0_11111111111111111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelpayloadbitstring_0_1111111111121
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelsignedbitstring_0_111111111111211111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case outtlschannelchallbitstring_1_1111111111111111_case_3
            solve( Message( ~u2f.1, sign(<log, pass, ~n.1>, u2fkey) ) ▶₁ #vr.7 )
              case outufchannelsignpayloadbitstringufkey_0_1111111111121111
              solve( Ack( ~u2f.1, <lg, pss, chall> ) ▶₁ #vr.8 )
                case intlschannelsignedbitstring_0_11111111111111111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelpayloadbitstring_0_1111111111121
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelsignedbitstring_0_111111111111211111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case outtlschannelchallbitstring_1_1111111111111111_case_4
            solve( Message( ~u2f.1, sign(<log, pass, ~n.1>, u2fkey) ) ▶₁ #vr.7 )
              case outufchannelsignpayloadbitstringufkey_0_1111111111121111
              solve( Ack( ~u2f.1, <lg, pss, chall> ) ▶₁ #vr.8 )
                case intlschannelsignedbitstring_0_11111111111111111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelpayloadbitstring_0_1111111111121
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelsignedbitstring_0_111111111111211111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case outtlschannelchallbitstring_1_1111111111111111_case_5
            solve( Message( ~u2f.1, sign(<log, pass, ~n.1>, u2fkey) ) ▶₁ #vr.7 )
              case outufchannelsignpayloadbitstringufkey_0_1111111111121111
              solve( Ack( ~u2f.1, <lg, pss, chall> ) ▶₁ #vr.8 )
                case intlschannelsignedbitstring_0_11111111111111111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelpayloadbitstring_0_1111111111121
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelsignedbitstring_0_111111111111211111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( State_11111111111111111( ~btn, ~kb, ~tls, ~u2f, chall, log, pass,
                                          u2fkey
                 ) ▶₀ #vr.4 )
            case outtlschannelchallbitstring_1_1111111111111111_case_1
            solve( Message( ~u2f.1, sign(<log, pass, ~n.1>, u2fkey) ) ▶₁ #vr.7 )
              case outufchannelsignpayloadbitstringufkey_0_1111111111121111
              solve( Ack( ~u2f.1, <lg, pss, chall> ) ▶₁ #vr.8 )
                case intlschannelsignedbitstring_0_11111111111111111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelpayloadbitstring_0_1111111111121
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelsignedbitstring_0_111111111111211111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case outtlschannelchallbitstring_1_1111111111111111_case_2
            solve( Message( ~u2f.1, sign(<log, pass, ~n.1>, u2fkey) ) ▶₁ #vr.7 )
              case outufchannelsignpayloadbitstringufkey_0_1111111111121111
              solve( Ack( ~u2f.1, <lg, pss, chall> ) ▶₁ #vr.8 )
                case intlschannelsignedbitstring_0_11111111111111111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelpayloadbitstring_0_1111111111121
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelsignedbitstring_0_111111111111211111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case outtlschannelchallbitstring_1_1111111111111111_case_3
            solve( Message( ~u2f.1, sign(<log, pass, ~n.1>, u2fkey) ) ▶₁ #vr.7 )
              case outufchannelsignpayloadbitstringufkey_0_1111111111121111
              solve( Ack( ~u2f.1, <lg, pss, chall> ) ▶₁ #vr.8 )
                case intlschannelsignedbitstring_0_11111111111111111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelpayloadbitstring_0_1111111111121
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelsignedbitstring_0_111111111111211111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case outtlschannelchallbitstring_1_1111111111111111_case_4
            solve( Message( ~u2f.1, sign(<log, pass, ~n.1>, u2fkey) ) ▶₁ #vr.7 )
              case outufchannelsignpayloadbitstringufkey_0_1111111111121111
              solve( Ack( ~u2f.1, <lg, pss, chall> ) ▶₁ #vr.8 )
                case intlschannelsignedbitstring_0_11111111111111111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelpayloadbitstring_0_1111111111121
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelsignedbitstring_0_111111111111211111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case outtlschannelchallbitstring_1_1111111111111111_case_5
            solve( Message( ~u2f.1, sign(<log, pass, ~n.1>, u2fkey) ) ▶₁ #vr.7 )
              case outufchannelsignpayloadbitstringufkey_0_1111111111121111
              solve( Ack( ~u2f.1, <lg, pss, chall> ) ▶₁ #vr.8 )
                case intlschannelsignedbitstring_0_11111111111111111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelpayloadbitstring_0_1111111111121
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case inufchannelsignedbitstring_0_111111111111211111
                solve( Message( ~tls, chall ) ▶₁ #vr.11 )
                  case outtlschannelchallbitstring_0_1111111111111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannellgbitstringpssbitstring_0_111111111111211
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case outtlschannelsignedbitstring_0_1111111111112111111
                  solve( Ack( ~tls, <lg, pss> ) ▶₁ #vr.12 )
                    case intlschannelchallbitstring_0_1111111111112111
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannellogpass_0_11111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_1
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  next
                    case intlschannelsignedbitstring_0_11111111111111111_case_2
                    solve( Message( ~kb.1, <lg, pss> ) ▶₁ #vr.15 )
                      case outkbchannellogpass_0_11111111112111111
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case lookupEvServerascnt_0_11111111111111111111_case_2
        solve( (#vr.17 < #t2)  ∥ (#vr.17 = #t2) )
          case case_1
          solve( State_11111111111111111( ~btn, ~kb, ~tls, ~u2f, chall, log, pass,
                                          ~n.1
                 ) ▶₀ #vr.4 )
            case outtlschannelchallbitstring_1_1111111111111111_case_1
            solve( Message( ~btn.1, 'pressed' ) ▶₁ #vr.7 )
              case outbtnchannelpressed_0_1111111111211111111
              by contradiction /* from formulas */
            qed
          next
            case outtlschannelchallbitstring_1_1111111111111111_case_2
            solve( Message( ~btn.1, 'pressed' ) ▶₁ #vr.7 )
              case outbtnchannelpressed_0_1111111111211111111
              by contradiction /* from formulas */
            qed
          next
            case outtlschannelchallbitstring_1_1111111111111111_case_3
            solve( Message( ~btn.1, 'pressed' ) ▶₁ #vr.7 )
              case outbtnchannelpressed_0_1111111111211111111
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          solve( State_11111111111111111( ~btn, ~kb, ~tls, ~u2f, chall, log, pass,
                                          ~n.1
                 ) ▶₀ #vr.4 )
            case outtlschannelchallbitstring_1_1111111111111111_case_1
            solve( Message( ~btn.1, 'pressed' ) ▶₁ #vr.7 )
              case outbtnchannelpressed_0_1111111111211111111
              by contradiction /* from formulas */
            qed
          next
            case outtlschannelchallbitstring_1_1111111111111111_case_2
            solve( Message( ~btn.1, 'pressed' ) ▶₁ #vr.7 )
              case outbtnchannelpressed_0_1111111111211111111
              by contradiction /* from formulas */
            qed
          next
            case outtlschannelchallbitstring_1_1111111111111111_case_3
            solve( Message( ~btn.1, 'pressed' ) ▶₁ #vr.7 )
              case outbtnchannelpressed_0_1111111111211111111
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (#t1 = #t2)  ∥ (#t2 < #t1) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_0( '0', ~n, 'EvServer' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'EvServer' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'EvServer' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'EvServer' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'EvServer' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'EvServer' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'EvServer' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_4
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_1( '1', ~n, 'EvToken' ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~n, 'EvToken' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, 'EvToken' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, 'EvToken' ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~n, 'EvToken' ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, 'EvToken' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, 'EvToken' ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

















rule (modulo E) Init[color=#ffffff, process="new ~tls.1:channel;",
                     issapicrule, role='Process']:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) newtlschannel_0_[color=#ffffff,
                                 process="new ~tls.1:channel;", issapicrule, role='Process']:
   [ State_( ), Fr( ~tls.1 ) ] --> [ State_1( ~tls.1 ) ]

  /*
  rule (modulo AC) newtlschannel_0_[color=#ffffff,
                                    process="new ~tls.1:channel;", issapicrule, role='Process']:
     [ State_( ), Fr( ~tls ) ] --> [ State_1( ~tls ) ]
  */

rule (modulo E) newufchannel_0_1[color=#ffffff,
                                 process="new ~u2f.1:channel;", issapicrule, role='Process']:
   [ State_1( ~tls.1 ), Fr( ~u2f.1 ) ] --> [ State_11( ~tls.1, ~u2f.1 ) ]

  /*
  rule (modulo AC) newufchannel_0_1[color=#ffffff,
                                    process="new ~u2f.1:channel;", issapicrule, role='Process']:
     [ State_1( ~tls ), Fr( ~u2f ) ] --> [ State_11( ~tls, ~u2f ) ]
  */

rule (modulo E) newkbchannel_0_11[color=#ffffff,
                                  process="new ~kb.1:channel;", issapicrule, role='Process']:
   [ State_11( ~tls.1, ~u2f.1 ), Fr( ~kb.1 ) ]
  -->
   [ State_111( ~kb.1, ~tls.1, ~u2f.1 ) ]

  /*
  rule (modulo AC) newkbchannel_0_11[color=#ffffff,
                                     process="new ~kb.1:channel;", issapicrule, role='Process']:
     [ State_11( ~tls, ~u2f ), Fr( ~kb ) ]
    -->
     [ State_111( ~kb, ~tls, ~u2f ) ]
  */

rule (modulo E) newbtnchannel_0_111[color=#ffffff,
                                    process="new ~btn.1:channel;", issapicrule, role='Process']:
   [ State_111( ~kb.1, ~tls.1, ~u2f.1 ), Fr( ~btn.1 ) ]
  -->
   [ State_1111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1 ) ]

  /*
  rule (modulo AC) newbtnchannel_0_111[color=#ffffff,
                                       process="new ~btn.1:channel;", issapicrule, role='Process']:
     [ State_111( ~kb, ~tls, ~u2f ), Fr( ~btn ) ]
    -->
     [ State_1111( ~btn, ~kb, ~tls, ~u2f ) ]
  */

rule (modulo E) newlog_0_1111[color=#ffffff, process="new log.1;",
                              issapicrule, role='Process']:
   [ State_1111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1 ), Fr( log.1 ) ]
  -->
   [ State_11111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1 ) ]

  /*
  rule (modulo AC) newlog_0_1111[color=#ffffff, process="new log.1;",
                                 issapicrule, role='Process']:
     [ State_1111( ~btn, ~kb, ~tls, ~u2f ), Fr( log ) ]
    -->
     [ State_11111( ~btn, ~kb, ~tls, ~u2f, log ) ]
  */

rule (modulo E) newpass_0_11111[color=#ffffff, process="new pass.1;",
                                issapicrule, role='Process']:
   [ State_11111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1 ), Fr( pass.1 ) ]
  -->
   [ State_111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1 ) ]

  /*
  rule (modulo AC) newpass_0_11111[color=#ffffff, process="new pass.1;",
                                   issapicrule, role='Process']:
     [ State_11111( ~btn, ~kb, ~tls, ~u2f, log ), Fr( pass ) ]
    -->
     [ State_111111( ~btn, ~kb, ~tls, ~u2f, log, pass ) ]
  */

rule (modulo E) newufkey_0_111111[color=#ffffff, process="new u2fkey.1;",
                                  issapicrule, role='Process']:
   [
   State_111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1 ),
   Fr( u2fkey.1 )
   ]
  -->
   [ State_1111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1, u2fkey.1 )
   ]

  /*
  rule (modulo AC) newufkey_0_111111[color=#ffffff,
                                     process="new u2fkey.1;", issapicrule, role='Process']:
     [ State_111111( ~btn, ~kb, ~tls, ~u2f, log, pass ), Fr( u2fkey ) ]
    -->
     [ State_1111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
  */

rule (modulo E) insertEvTokenzero_0_1111111[color=#ffffff,
                                            process="insert 'EvToken','zero';", issapicrule, role='Process']:
   [ State_1111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1, u2fkey.1 )
   ]
  --[ Insert( 'EvToken', 'zero' ) ]->
   [
   State_11111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1, u2fkey.1 )
   ]

  /*
  rule (modulo AC) insertEvTokenzero_0_1111111[color=#ffffff,
                                               process="insert 'EvToken','zero';", issapicrule,
                                               role='Process']:
     [ State_1111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
    --[ Insert( 'EvToken', 'zero' ) ]->
     [ State_11111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
  */

rule (modulo E) insertEvServerzero_0_11111111[color=#ffffff,
                                              process="insert 'EvServer','zero';", issapicrule,
                                              role='Process']:
   [
   State_11111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1, u2fkey.1 )
   ]
  --[ Insert( 'EvServer', 'zero' ) ]->
   [
   State_111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1, u2fkey.1 )
   ]

  /*
  rule (modulo AC) insertEvServerzero_0_11111111[color=#ffffff,
                                                 process="insert 'EvServer','zero';", issapicrule,
                                                 role='Process']:
     [ State_11111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
    --[ Insert( 'EvServer', 'zero' ) ]->
     [ State_111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
  */

rule (modulo E) p_0_111111111[color=#ffffff, process="!", issapicrule,
                              role='Process']:
   [
   State_111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1, u2fkey.1 )
   ]
  -->
   [
   !Semistate_1111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                          u2fkey.1
   )
   ]

  /*
  rule (modulo AC) p_0_111111111[color=#ffffff, process="!", issapicrule,
                                 role='Process']:
     [ State_111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
    -->
     [ !Semistate_1111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
  */

rule (modulo E) p_1_111111111[color=#ffffff, process="!", issapicrule,
                              role='Process']:
   [
   !Semistate_1111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                          u2fkey.1
   )
   ]
  -->
   [
   State_1111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) p_1_111111111[color=#ffffff, process="!", issapicrule,
                                 role='Process']:
     [ !Semistate_1111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
    -->
     [ State_1111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
  */

rule (modulo E) p_0_1111111111[color=#ffffff, process="|", issapicrule,
                               role='Process']:
   [
   State_1111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1, u2fkey.1
   )
   ]
  -->
   [
   State_11111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1, u2fkey.1
   ),
   State_11111111112( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) p_0_1111111111[color=#ffffff, process="|", issapicrule,
                                  role='Process']:
     [ State_1111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
    -->
     [
     State_11111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ),
     State_11111111112( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey )
     ]
  */

rule (modulo E) p_0_11111111111[color=#ffffff, process="|", issapicrule,
                                role='Process']:
   [
   State_11111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1, u2fkey.1
   )
   ]
  -->
   [
   State_111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                       u2fkey.1
   ),
   State_111111111112( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                       u2fkey.1
   )
   ]

  /*
  rule (modulo AC) p_0_11111111111[color=#ffffff, process="|", issapicrule,
                                   role='Process']:
     [ State_11111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
    -->
     [
     State_111111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ),
     State_111111111112( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey )
     ]
  */

rule (modulo E) p_0_111111111111[color=#ffffff, process="|", issapicrule,
                                 role='Process']:
   [
   State_111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                       u2fkey.1
   )
   ]
  -->
   [
   State_1111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                        u2fkey.1
   ),
   State_1111111111112( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                        u2fkey.1
   )
   ]

  /*
  rule (modulo AC) p_0_111111111111[color=#ffffff, process="|",
                                    issapicrule, role='Process']:
     [ State_111111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
    -->
     [
     State_1111111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ),
     State_1111111111112( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey )
     ]
  */

rule (modulo E) Stlschannellogpasspkufkey_0_1111111111111[color=#ffffff,
                                                          process="S(~tls.1:channel, log.1, pass.1, pk(u2fkey.1))",
                                                          issapicrule, role='Process']:
   [
   State_1111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                        u2fkey.1
   )
   ]
  -->
   [
   State_11111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                         u2fkey.1
   ),
   State_11111111111112( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                         u2fkey.1
   )
   ]

  /*
  rule (modulo AC) Stlschannellogpasspkufkey_0_1111111111111[color=#ffffff,
                                                             process="S(~tls.1:channel, log.1, pass.1, pk(u2fkey.1))",
                                                             issapicrule, role='Process']:
     [ State_1111111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
    -->
     [
     State_11111111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ),
     State_11111111111112( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey )
     ]
  */

rule (modulo E) intlschannellogpass_0_11111111111111[color=#40805b,
                                                     process="in(~tls.1:channel,<=log.1, =pass.1>);",
                                                     issapicrule, role='S']:
   [
   State_11111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                         u2fkey.1
   ),
   Message( ~tls.1, x.2 )
   ]
  -->
   [
   Let_111111111111111( x.2, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                        u2fkey.1
   ),
   Ack( ~tls.1, x.2 )
   ]

  /*
  rule (modulo AC) intlschannellogpass_0_11111111111111[color=#40805b,
                                                        process="in(~tls.1:channel,<=log.1, =pass.1>);",
                                                        issapicrule, role='S']:
     [
     State_11111111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ),
     Message( ~tls, x )
     ]
    -->
     [
     Let_111111111111111( x, ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ),
     Ack( ~tls, x )
     ]
  */

rule (modulo E) intlschannellogpass_1_11111111111111[color=#40805b,
                                                     process="in(~tls.1:channel,<=log.1, =pass.1>);",
                                                     issapicrule, role='S']:
   [
   Let_111111111111111( <log.1, pass.1>, ~btn.1, ~kb.1, ~tls.1, ~u2f.1,
                        log.1, pass.1, u2fkey.1
   )
   ]
  -->
   [
   State_111111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                          u2fkey.1
   )
   ]

  /*
  rule (modulo AC) intlschannellogpass_1_11111111111111[color=#40805b,
                                                        process="in(~tls.1:channel,<=log.1, =pass.1>);",
                                                        issapicrule, role='S']:
     [
     Let_111111111111111( <log, pass>, ~btn, ~kb, ~tls, ~u2f, log, pass,
                          u2fkey
     )
     ]
    -->
     [ State_111111111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
  */

rule (modulo E) newchallbitstring_0_111111111111111[color=#40805b,
                                                    process="new chall.1:bitstring;", issapicrule, role='S']:
   [
   State_111111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                          u2fkey.1
   ),
   Fr( chall.1 )
   ]
  -->
   [
   State_1111111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1, log.1,
                           pass.1, u2fkey.1
   )
   ]

  // loop breaker: [0]
  /*
  rule (modulo AC) newchallbitstring_0_111111111111111[color=#40805b,
                                                       process="new chall.1:bitstring;", issapicrule,
                                                       role='S']:
     [
     State_111111111111111( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ),
     Fr( chall )
     ]
    -->
     [
     State_1111111111111111( ~btn, ~kb, ~tls, ~u2f, chall, log, pass, u2fkey )
     ]
    // loop breaker: [0]
  */

rule (modulo E) outtlschannelchallbitstring_0_1111111111111111[color=#40805b,
                                                               process="out(~tls.1:channel,chall.1:bitstring);",
                                                               issapicrule, role='S']:
   [
   State_1111111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1, log.1,
                           pass.1, u2fkey.1
   )
   ]
  -->
   [
   Message( ~tls.1, chall.1 ),
   Semistate_11111111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1,
                                log.1, pass.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) outtlschannelchallbitstring_0_1111111111111111[color=#40805b,
                                                                  process="out(~tls.1:channel,chall.1:bitstring);",
                                                                  issapicrule, role='S']:
     [
     State_1111111111111111( ~btn, ~kb, ~tls, ~u2f, chall, log, pass, u2fkey )
     ]
    -->
     [
     Message( ~tls, chall ),
     Semistate_11111111111111111( ~btn, ~kb, ~tls, ~u2f, chall, log, pass,
                                  u2fkey
     )
     ]
  */

rule (modulo E) outtlschannelchallbitstring_1_1111111111111111[color=#40805b,
                                                               process="out(~tls.1:channel,chall.1:bitstring);",
                                                               issapicrule, role='S']:
   [
   Semistate_11111111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1,
                                log.1, pass.1, u2fkey.1
   ),
   Ack( ~tls.1, chall.1 )
   ]
  -->
   [
   State_11111111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1, log.1,
                            pass.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) outtlschannelchallbitstring_1_1111111111111111[color=#40805b,
                                                                  process="out(~tls.1:channel,chall.1:bitstring);",
                                                                  issapicrule, role='S']:
     [
     Semistate_11111111111111111( ~btn, ~kb, ~tls, ~u2f, chall, log, pass,
                                  u2fkey
     ),
     Ack( ~tls, chall )
     ]
    -->
     [
     State_11111111111111111( ~btn, ~kb, ~tls, ~u2f, chall, log, pass, u2fkey
     )
     ]
  */

rule (modulo E) intlschannelsignedbitstring_0_11111111111111111[color=#40805b,
                                                                process="in(~tls.1:channel,signed.1:bitstring);",
                                                                issapicrule, role='S']:
   [
   State_11111111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1, log.1,
                            pass.1, u2fkey.1
   ),
   Message( ~tls.1, x.2 )
   ]
  -->
   [
   Let_111111111111111111( x.2, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1,
                           log.1, pass.1, u2fkey.1
   ),
   Ack( ~tls.1, x.2 )
   ]

  // loop breaker: [0]
  /*
  rule (modulo AC) intlschannelsignedbitstring_0_11111111111111111[color=#40805b,
                                                                   process="in(~tls.1:channel,signed.1:bitstring);",
                                                                   issapicrule, role='S']:
     [
     State_11111111111111111( ~btn, ~kb, ~tls, ~u2f, chall, log, pass, u2fkey
     ),
     Message( ~tls, x )
     ]
    -->
     [
     Let_111111111111111111( x, ~btn, ~kb, ~tls, ~u2f, chall, log, pass,
                             u2fkey
     ),
     Ack( ~tls, x )
     ]
    // loop breaker: [0]
  */

rule (modulo E) intlschannelsignedbitstring_1_11111111111111111[color=#40805b,
                                                                process="in(~tls.1:channel,signed.1:bitstring);",
                                                                issapicrule, role='S']:
   [
   Let_111111111111111111( signed.1, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1,
                           log.1, pass.1, u2fkey.1
   )
   ]
  -->
   [
   State_111111111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1, log.1,
                             pass.1, signed.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) intlschannelsignedbitstring_1_11111111111111111[color=#40805b,
                                                                   process="in(~tls.1:channel,signed.1:bitstring);",
                                                                   issapicrule, role='S']:
     [
     Let_111111111111111111( signed, ~btn, ~kb, ~tls, ~u2f, chall, log, pass,
                             u2fkey
     )
     ]
    -->
     [
     State_111111111111111111( ~btn, ~kb, ~tls, ~u2f, chall, log, pass,
                               signed, u2fkey
     )
     ]
  */

rule (modulo E) ifchecksignsignedbitstringpkufkeylogpasschallbitstring_0_111111111111111111[color=#40805b,
                                                                                            process="if checksign(signed.1:bitstring, pk(u2fkey.1))=<log.1, pass.1, chall.1:bitstring>",
                                                                                            issapicrule,
                                                                                            role='S']:
   [
   State_111111111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1, log.1,
                             pass.1, signed.1, u2fkey.1
   )
   ]
  --[
  Pred_Eq( checksign(signed.1, pk(u2fkey.1)), <log.1, pass.1, chall.1> )
  ]->
   [
   State_1111111111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1, log.1,
                              pass.1, signed.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) ifchecksignsignedbitstringpkufkeylogpasschallbitstring_0_111111111111111111[color=#40805b,
                                                                                               process="if checksign(signed.1:bitstring, pk(u2fkey.1))=<log.1, pass.1, chall.1:bitstring>",
                                                                                               issapicrule,
                                                                                               role='S']:
     [
     State_111111111111111111( ~btn, ~kb, ~tls, ~u2f, chall, log, pass,
                               signed, u2fkey
     )
     ]
    --[ Pred_Eq( z, <log, pass, chall> ) ]->
     [
     State_1111111111111111111( ~btn, ~kb, ~tls, ~u2f, chall, log, pass,
                                signed, u2fkey
     )
     ]
    variants (modulo AC)
    1. signed
             = signed.12
       u2fkey
             = u2fkey.12
       z     = checksign(signed.12, pk(u2fkey.12))
    
    2. signed
             = sign(x.12, x.13)
       u2fkey
             = x.13
       z     = x.12
  */

rule (modulo E) ifchecksignsignedbitstringpkufkeylogpasschallbitstring_1_111111111111111111[color=#40805b,
                                                                                            process="if checksign(signed.1:bitstring, pk(u2fkey.1))=<log.1, pass.1, chall.1:bitstring>",
                                                                                            issapicrule,
                                                                                            role='S']:
   [
   State_111111111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1, log.1,
                             pass.1, signed.1, u2fkey.1
   )
   ]
  --[
  Pred_Not_Eq( checksign(signed.1, pk(u2fkey.1)), <log.1, pass.1, chall.1>
  )
  ]->
   [
   State_1111111111111111112( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1, log.1,
                              pass.1, signed.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) ifchecksignsignedbitstringpkufkeylogpasschallbitstring_1_111111111111111111[color=#40805b,
                                                                                               process="if checksign(signed.1:bitstring, pk(u2fkey.1))=<log.1, pass.1, chall.1:bitstring>",
                                                                                               issapicrule,
                                                                                               role='S']:
     [
     State_111111111111111111( ~btn, ~kb, ~tls, ~u2f, chall, log, pass,
                               signed, u2fkey
     )
     ]
    --[ Pred_Not_Eq( z, <log, pass, chall> ) ]->
     [
     State_1111111111111111112( ~btn, ~kb, ~tls, ~u2f, chall, log, pass,
                                signed, u2fkey
     )
     ]
    variants (modulo AC)
    1. signed
             = signed.12
       u2fkey
             = u2fkey.12
       z     = checksign(signed.12, pk(u2fkey.12))
    
    2. signed
             = sign(x.12, x.13)
       u2fkey
             = x.13
       z     = x.12
  */

rule (modulo E) lockEvServer_0_1111111111111111111[color=#40805b,
                                                   process="lock 'EvServer';", issapicrule, role='S']:
   [
   State_1111111111111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1, log.1,
                              pass.1, signed.1, u2fkey.1
   ),
   Fr( lock )
   ]
  --[ Lock_0( '0', lock, 'EvServer' ), Lock( '0', lock, 'EvServer' ) ]->
   [
   State_11111111111111111111( lock, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1,
                               log.1, pass.1, signed.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) lockEvServer_0_1111111111111111111[color=#40805b,
                                                      process="lock 'EvServer';", issapicrule, role='S']:
     [
     State_1111111111111111111( ~btn, ~kb, ~tls, ~u2f, chall, log, pass,
                                signed, u2fkey
     ),
     Fr( lock )
     ]
    --[ Lock_0( '0', lock, 'EvServer' ), Lock( '0', lock, 'EvServer' ) ]->
     [
     State_11111111111111111111( lock, ~btn, ~kb, ~tls, ~u2f, chall, log,
                                 pass, signed, u2fkey
     )
     ]
  */

rule (modulo E) lookupEvServerascnt_0_11111111111111111111[color=#40805b,
                                                           process="lookup 'EvServer' as cnt.1", derivchecks,
                                                           issapicrule, role='S']:
   [
   State_11111111111111111111( lock, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1,
                               log.1, pass.1, signed.1, u2fkey.1
   )
   ]
  --[ IsIn( 'EvServer', cnt.1 ) ]->
   [
   State_111111111111111111111( lock, ~btn.1, ~kb.1, ~tls.1, ~u2f.1,
                                chall.1, cnt.1, log.1, pass.1, signed.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) lookupEvServerascnt_0_11111111111111111111[color=#40805b,
                                                              process="lookup 'EvServer' as cnt.1",
                                                              derivchecks, issapicrule, role='S']:
     [
     State_11111111111111111111( lock, ~btn, ~kb, ~tls, ~u2f, chall, log,
                                 pass, signed, u2fkey
     )
     ]
    --[ IsIn( 'EvServer', cnt ) ]->
     [
     State_111111111111111111111( lock, ~btn, ~kb, ~tls, ~u2f, chall, cnt,
                                  log, pass, signed, u2fkey
     )
     ]
  */

rule (modulo E) lookupEvServerascnt_1_11111111111111111111[color=#40805b,
                                                           process="lookup 'EvServer' as cnt.1", derivchecks,
                                                           issapicrule, role='S']:
   [
   State_11111111111111111111( lock, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1,
                               log.1, pass.1, signed.1, u2fkey.1
   )
   ]
  --[ IsNotSet( 'EvServer' ) ]->
   [
   State_111111111111111111112( lock, ~btn.1, ~kb.1, ~tls.1, ~u2f.1,
                                chall.1, log.1, pass.1, signed.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) lookupEvServerascnt_1_11111111111111111111[color=#40805b,
                                                              process="lookup 'EvServer' as cnt.1",
                                                              derivchecks, issapicrule, role='S']:
     [
     State_11111111111111111111( lock, ~btn, ~kb, ~tls, ~u2f, chall, log,
                                 pass, signed, u2fkey
     )
     ]
    --[ IsNotSet( 'EvServer' ) ]->
     [
     State_111111111111111111112( lock, ~btn, ~kb, ~tls, ~u2f, chall, log,
                                  pass, signed, u2fkey
     )
     ]
  */

rule (modulo E) eventServerAcceptcnt_0_111111111111111111111[color=#40805b,
                                                             process="event ServerAccept( cnt.1 );",
                                                             issapicrule, role='S']:
   [
   State_111111111111111111111( lock, ~btn.1, ~kb.1, ~tls.1, ~u2f.1,
                                chall.1, cnt.1, log.1, pass.1, signed.1, u2fkey.1
   )
   ]
  --[ ServerAccept( cnt.1 ) ]->
   [
   State_1111111111111111111111( lock, ~btn.1, ~kb.1, ~tls.1, ~u2f.1,
                                 chall.1, cnt.1, log.1, pass.1, signed.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) eventServerAcceptcnt_0_111111111111111111111[color=#40805b,
                                                                process="event ServerAccept( cnt.1 );",
                                                                issapicrule, role='S']:
     [
     State_111111111111111111111( lock, ~btn, ~kb, ~tls, ~u2f, chall, cnt,
                                  log, pass, signed, u2fkey
     )
     ]
    --[ ServerAccept( cnt ) ]->
     [
     State_1111111111111111111111( lock, ~btn, ~kb, ~tls, ~u2f, chall, cnt,
                                   log, pass, signed, u2fkey
     )
     ]
  */

rule (modulo E) insertEvServersucccnt_0_1111111111111111111111[color=#40805b,
                                                               process="insert 'EvServer',succ(cnt.1);",
                                                               issapicrule, role='S']:
   [
   State_1111111111111111111111( lock, ~btn.1, ~kb.1, ~tls.1, ~u2f.1,
                                 chall.1, cnt.1, log.1, pass.1, signed.1, u2fkey.1
   )
   ]
  --[ Insert( 'EvServer', succ(cnt.1) ) ]->
   [
   State_11111111111111111111111( lock, ~btn.1, ~kb.1, ~tls.1, ~u2f.1,
                                  chall.1, cnt.1, log.1, pass.1, signed.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) insertEvServersucccnt_0_1111111111111111111111[color=#40805b,
                                                                  process="insert 'EvServer',succ(cnt.1);",
                                                                  issapicrule, role='S']:
     [
     State_1111111111111111111111( lock, ~btn, ~kb, ~tls, ~u2f, chall, cnt,
                                   log, pass, signed, u2fkey
     )
     ]
    --[ Insert( 'EvServer', succ(cnt) ) ]->
     [
     State_11111111111111111111111( lock, ~btn, ~kb, ~tls, ~u2f, chall, cnt,
                                    log, pass, signed, u2fkey
     )
     ]
  */

rule (modulo E) unlockEvServer_0_11111111111111111111111[color=#40805b,
                                                         process="unlock 'EvServer';", issapicrule, role='S']:
   [
   State_11111111111111111111111( lock, ~btn.1, ~kb.1, ~tls.1, ~u2f.1,
                                  chall.1, cnt.1, log.1, pass.1, signed.1, u2fkey.1
   )
   ]
  --[ Unlock_0( '0', lock, 'EvServer' ), Unlock( '0', lock, 'EvServer' )
  ]->
   [
   State_111111111111111111111111( lock, ~btn.1, ~kb.1, ~tls.1, ~u2f.1,
                                   chall.1, cnt.1, log.1, pass.1, signed.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) unlockEvServer_0_11111111111111111111111[color=#40805b,
                                                            process="unlock 'EvServer';", issapicrule,
                                                            role='S']:
     [
     State_11111111111111111111111( lock, ~btn, ~kb, ~tls, ~u2f, chall, cnt,
                                    log, pass, signed, u2fkey
     )
     ]
    --[ Unlock_0( '0', lock, 'EvServer' ), Unlock( '0', lock, 'EvServer' )
    ]->
     [
     State_111111111111111111111111( lock, ~btn, ~kb, ~tls, ~u2f, chall, cnt,
                                     log, pass, signed, u2fkey
     )
     ]
  */

rule (modulo E) p_0_111111111111111111111111[color=#40805b, process="0",
                                             issapicrule, role='S']:
   [
   State_111111111111111111111111( lock, ~btn.1, ~kb.1, ~tls.1, ~u2f.1,
                                   chall.1, cnt.1, log.1, pass.1, signed.1, u2fkey.1
   )
   ]
  -->
   [ ]

  /*
  rule (modulo AC) p_0_111111111111111111111111[color=#40805b, process="0",
                                                issapicrule, role='S']:
     [
     State_111111111111111111111111( lock, ~btn, ~kb, ~tls, ~u2f, chall, cnt,
                                     log, pass, signed, u2fkey
     )
     ]
    -->
     [ ]
  */

rule (modulo E) p_0_111111111111111111112[color=#40805b, process="0",
                                          issapicrule, role='S']:
   [
   State_111111111111111111112( lock, ~btn.1, ~kb.1, ~tls.1, ~u2f.1,
                                chall.1, log.1, pass.1, signed.1, u2fkey.1
   )
   ]
  -->
   [ ]

  /*
  rule (modulo AC) p_0_111111111111111111112[color=#40805b, process="0",
                                             issapicrule, role='S']:
     [
     State_111111111111111111112( lock, ~btn, ~kb, ~tls, ~u2f, chall, log,
                                  pass, signed, u2fkey
     )
     ]
    -->
     [ ]
  */

rule (modulo E) p_0_1111111111111111112[color=#40805b, process="0",
                                        issapicrule, role='S']:
   [
   State_1111111111111111112( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, chall.1, log.1,
                              pass.1, signed.1, u2fkey.1
   )
   ]
  -->
   [ ]

  /*
  rule (modulo AC) p_0_1111111111111111112[color=#40805b, process="0",
                                           issapicrule, role='S']:
     [
     State_1111111111111111112( ~btn, ~kb, ~tls, ~u2f, chall, log, pass,
                                signed, u2fkey
     )
     ]
    -->
     [ ]
  */

rule (modulo E) p_0_11111111111112[color=#ffffff, process="0",
                                   issapicrule, role='Process']:
   [
   State_11111111111112( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                         u2fkey.1
   )
   ]
  -->
   [ ]

  /*
  rule (modulo AC) p_0_11111111111112[color=#ffffff, process="0",
                                      issapicrule, role='Process']:
     [ State_11111111111112( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
    -->
     [ ]
  */

rule (modulo E) Ptlschannelufchannelkbchannel_0_1111111111112[color=#ffffff,
                                                              process="P(~tls.1:channel, ~u2f.1:channel, ~kb.1:channel)",
                                                              issapicrule, role='Process']:
   [
   State_1111111111112( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                        u2fkey.1
   )
   ]
  -->
   [
   State_11111111111121( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                         u2fkey.1
   ),
   State_11111111111122( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                         u2fkey.1
   )
   ]

  /*
  rule (modulo AC) Ptlschannelufchannelkbchannel_0_1111111111112[color=#ffffff,
                                                                 process="P(~tls.1:channel, ~u2f.1:channel, ~kb.1:channel)",
                                                                 issapicrule, role='Process']:
     [ State_1111111111112( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
    -->
     [
     State_11111111111121( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ),
     State_11111111111122( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey )
     ]
  */

rule (modulo E) inkbchannellgbitstringpssbitstring_0_11111111111121[color=#6c8040,
                                                                    process="in(~kb.1:channel,<lg.1:bitstring, pss.1:bitstring>);",
                                                                    issapicrule, role='P']:
   [
   State_11111111111121( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                         u2fkey.1
   ),
   Message( ~kb.1, x.2 )
   ]
  -->
   [
   Let_111111111111211( x.2, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                        u2fkey.1
   ),
   Ack( ~kb.1, x.2 )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) inkbchannellgbitstringpssbitstring_0_11111111111121[color=#6c8040,
                                                                       process="in(~kb.1:channel,<lg.1:bitstring, pss.1:bitstring>);",
                                                                       issapicrule, role='P']:
     [
     State_11111111111121( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ),
     Message( ~kb, x )
     ]
    -->
     [
     Let_111111111111211( x, ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ),
     Ack( ~kb, x )
     ]
    // loop breaker: [1]
  */

rule (modulo E) inkbchannellgbitstringpssbitstring_1_11111111111121[color=#6c8040,
                                                                    process="in(~kb.1:channel,<lg.1:bitstring, pss.1:bitstring>);",
                                                                    issapicrule, role='P']:
   [
   Let_111111111111211( <lg.1, pss.1>, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1,
                        pass.1, u2fkey.1
   )
   ]
  -->
   [
   State_111111111111211( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                          pass.1, pss.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) inkbchannellgbitstringpssbitstring_1_11111111111121[color=#6c8040,
                                                                       process="in(~kb.1:channel,<lg.1:bitstring, pss.1:bitstring>);",
                                                                       issapicrule, role='P']:
     [
     Let_111111111111211( <lg, pss>, ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey
     )
     ]
    -->
     [
     State_111111111111211( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss, u2fkey
     )
     ]
  */

rule (modulo E) outtlschannellgbitstringpssbitstring_0_111111111111211[color=#6c8040,
                                                                       process="out(~tls.1:channel,<lg.1:bitstring, pss.1:bitstring>);",
                                                                       issapicrule, role='P']:
   [
   State_111111111111211( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                          pass.1, pss.1, u2fkey.1
   )
   ]
  -->
   [
   Message( ~tls.1, <lg.1, pss.1> ),
   Semistate_1111111111112111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                               pass.1, pss.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) outtlschannellgbitstringpssbitstring_0_111111111111211[color=#6c8040,
                                                                          process="out(~tls.1:channel,<lg.1:bitstring, pss.1:bitstring>);",
                                                                          issapicrule, role='P']:
     [
     State_111111111111211( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss, u2fkey
     )
     ]
    -->
     [
     Message( ~tls, <lg, pss> ),
     Semistate_1111111111112111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss,
                                 u2fkey
     )
     ]
  */

rule (modulo E) outtlschannellgbitstringpssbitstring_1_111111111111211[color=#6c8040,
                                                                       process="out(~tls.1:channel,<lg.1:bitstring, pss.1:bitstring>);",
                                                                       issapicrule, role='P']:
   [
   Semistate_1111111111112111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                               pass.1, pss.1, u2fkey.1
   ),
   Ack( ~tls.1, <lg.1, pss.1> )
   ]
  -->
   [
   State_1111111111112111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                           pass.1, pss.1, u2fkey.1
   )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) outtlschannellgbitstringpssbitstring_1_111111111111211[color=#6c8040,
                                                                          process="out(~tls.1:channel,<lg.1:bitstring, pss.1:bitstring>);",
                                                                          issapicrule, role='P']:
     [
     Semistate_1111111111112111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss,
                                 u2fkey
     ),
     Ack( ~tls, <lg, pss> )
     ]
    -->
     [
     State_1111111111112111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss, u2fkey
     )
     ]
    // loop breaker: [1]
  */

rule (modulo E) intlschannelchallbitstring_0_1111111111112111[color=#6c8040,
                                                              process="in(~tls.1:channel,chall.2:bitstring);",
                                                              issapicrule, role='P']:
   [
   State_1111111111112111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                           pass.1, pss.1, u2fkey.1
   ),
   Message( ~tls.1, x.2 )
   ]
  -->
   [
   Let_11111111111121111( x.2, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                          pass.1, pss.1, u2fkey.1
   ),
   Ack( ~tls.1, x.2 )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) intlschannelchallbitstring_0_1111111111112111[color=#6c8040,
                                                                 process="in(~tls.1:channel,chall.2:bitstring);",
                                                                 issapicrule, role='P']:
     [
     State_1111111111112111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss, u2fkey
     ),
     Message( ~tls, x )
     ]
    -->
     [
     Let_11111111111121111( x, ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss,
                            u2fkey
     ),
     Ack( ~tls, x )
     ]
    // loop breaker: [1]
  */

rule (modulo E) intlschannelchallbitstring_1_1111111111112111[color=#6c8040,
                                                              process="in(~tls.1:channel,chall.2:bitstring);",
                                                              issapicrule, role='P']:
   [
   Let_11111111111121111( chall.2, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1,
                          log.1, pass.1, pss.1, u2fkey.1
   )
   ]
  -->
   [
   State_11111111111121111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                            pass.1, pss.1, u2fkey.1, chall.2
   )
   ]

  /*
  rule (modulo AC) intlschannelchallbitstring_1_1111111111112111[color=#6c8040,
                                                                 process="in(~tls.1:channel,chall.2:bitstring);",
                                                                 issapicrule, role='P']:
     [
     Let_11111111111121111( chall, ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss,
                            u2fkey
     )
     ]
    -->
     [
     State_11111111111121111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss,
                              u2fkey, chall
     )
     ]
  */

rule (modulo E) outufchannellgbitstringpssbitstringchallbitstring_0_11111111111121111[color=#6c8040,
                                                                                      process="out(~u2f.1:channel,<lg.1:bitstring, pss.1:bitstring, chall.2:bitstring>);",
                                                                                      issapicrule, role='P']:
   [
   State_11111111111121111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                            pass.1, pss.1, u2fkey.1, chall.2
   )
   ]
  -->
   [
   Message( ~u2f.1, <lg.1, pss.1, chall.2> ),
   Semistate_111111111111211111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                                 pass.1, pss.1, u2fkey.1, chall.2
   )
   ]

  /*
  rule (modulo AC) outufchannellgbitstringpssbitstringchallbitstring_0_11111111111121111[color=#6c8040,
                                                                                         process="out(~u2f.1:channel,<lg.1:bitstring, pss.1:bitstring, chall.2:bitstring>);",
                                                                                         issapicrule,
                                                                                         role='P']:
     [
     State_11111111111121111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss,
                              u2fkey, chall
     )
     ]
    -->
     [
     Message( ~u2f, <lg, pss, chall> ),
     Semistate_111111111111211111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss,
                                   u2fkey, chall
     )
     ]
  */

rule (modulo E) outufchannellgbitstringpssbitstringchallbitstring_1_11111111111121111[color=#6c8040,
                                                                                      process="out(~u2f.1:channel,<lg.1:bitstring, pss.1:bitstring, chall.2:bitstring>);",
                                                                                      issapicrule, role='P']:
   [
   Semistate_111111111111211111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                                 pass.1, pss.1, u2fkey.1, chall.2
   ),
   Ack( ~u2f.1, <lg.1, pss.1, chall.2> )
   ]
  -->
   [
   State_111111111111211111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                             pass.1, pss.1, u2fkey.1, chall.2
   )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) outufchannellgbitstringpssbitstringchallbitstring_1_11111111111121111[color=#6c8040,
                                                                                         process="out(~u2f.1:channel,<lg.1:bitstring, pss.1:bitstring, chall.2:bitstring>);",
                                                                                         issapicrule,
                                                                                         role='P']:
     [
     Semistate_111111111111211111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss,
                                   u2fkey, chall
     ),
     Ack( ~u2f, <lg, pss, chall> )
     ]
    -->
     [
     State_111111111111211111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss,
                               u2fkey, chall
     )
     ]
    // loop breaker: [1]
  */

rule (modulo E) inufchannelsignedbitstring_0_111111111111211111[color=#6c8040,
                                                                process="in(~u2f.1:channel,signed.2:bitstring);",
                                                                issapicrule, role='P']:
   [
   State_111111111111211111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                             pass.1, pss.1, u2fkey.1, chall.2
   ),
   Message( ~u2f.1, x.3 )
   ]
  -->
   [
   Let_1111111111112111111( x.3, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                            pass.1, pss.1, u2fkey.1, chall.2
   ),
   Ack( ~u2f.1, x.3 )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) inufchannelsignedbitstring_0_111111111111211111[color=#6c8040,
                                                                   process="in(~u2f.1:channel,signed.2:bitstring);",
                                                                   issapicrule, role='P']:
     [
     State_111111111111211111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss,
                               u2fkey, chall
     ),
     Message( ~u2f, x )
     ]
    -->
     [
     Let_1111111111112111111( x, ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss,
                              u2fkey, chall
     ),
     Ack( ~u2f, x )
     ]
    // loop breaker: [1]
  */

rule (modulo E) inufchannelsignedbitstring_1_111111111111211111[color=#6c8040,
                                                                process="in(~u2f.1:channel,signed.2:bitstring);",
                                                                issapicrule, role='P']:
   [
   Let_1111111111112111111( signed.2, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1,
                            log.1, pass.1, pss.1, u2fkey.1, chall.2
   )
   ]
  -->
   [
   State_1111111111112111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                              pass.1, pss.1, u2fkey.1, chall.2, signed.2
   )
   ]

  /*
  rule (modulo AC) inufchannelsignedbitstring_1_111111111111211111[color=#6c8040,
                                                                   process="in(~u2f.1:channel,signed.2:bitstring);",
                                                                   issapicrule, role='P']:
     [
     Let_1111111111112111111( signed, ~btn, ~kb, ~tls, ~u2f, lg, log, pass,
                              pss, u2fkey, chall
     )
     ]
    -->
     [
     State_1111111111112111111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss,
                                u2fkey, chall, signed
     )
     ]
  */

rule (modulo E) outtlschannelsignedbitstring_0_1111111111112111111[color=#6c8040,
                                                                   process="out(~tls.1:channel,signed.2:bitstring);",
                                                                   issapicrule, role='P']:
   [
   State_1111111111112111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                              pass.1, pss.1, u2fkey.1, chall.2, signed.2
   )
   ]
  -->
   [
   Message( ~tls.1, signed.2 ),
   Semistate_11111111111121111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1,
                                   log.1, pass.1, pss.1, u2fkey.1, chall.2, signed.2
   )
   ]

  /*
  rule (modulo AC) outtlschannelsignedbitstring_0_1111111111112111111[color=#6c8040,
                                                                      process="out(~tls.1:channel,signed.2:bitstring);",
                                                                      issapicrule, role='P']:
     [
     State_1111111111112111111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss,
                                u2fkey, chall, signed
     )
     ]
    -->
     [
     Message( ~tls, signed ),
     Semistate_11111111111121111111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass,
                                     pss, u2fkey, chall, signed
     )
     ]
  */

rule (modulo E) outtlschannelsignedbitstring_1_1111111111112111111[color=#6c8040,
                                                                   process="out(~tls.1:channel,signed.2:bitstring);",
                                                                   issapicrule, role='P']:
   [
   Semistate_11111111111121111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1,
                                   log.1, pass.1, pss.1, u2fkey.1, chall.2, signed.2
   ),
   Ack( ~tls.1, signed.2 )
   ]
  -->
   [
   State_11111111111121111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                               pass.1, pss.1, u2fkey.1, chall.2, signed.2
   )
   ]

  /*
  rule (modulo AC) outtlschannelsignedbitstring_1_1111111111112111111[color=#6c8040,
                                                                      process="out(~tls.1:channel,signed.2:bitstring);",
                                                                      issapicrule, role='P']:
     [
     Semistate_11111111111121111111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass,
                                     pss, u2fkey, chall, signed
     ),
     Ack( ~tls, signed )
     ]
    -->
     [
     State_11111111111121111111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss,
                                 u2fkey, chall, signed
     )
     ]
  */

rule (modulo E) p_0_11111111111121111111[color=#6c8040, process="0",
                                         issapicrule, role='P']:
   [
   State_11111111111121111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lg.1, log.1,
                               pass.1, pss.1, u2fkey.1, chall.2, signed.2
   )
   ]
  -->
   [ ]

  /*
  rule (modulo AC) p_0_11111111111121111111[color=#6c8040, process="0",
                                            issapicrule, role='P']:
     [
     State_11111111111121111111( ~btn, ~kb, ~tls, ~u2f, lg, log, pass, pss,
                                 u2fkey, chall, signed
     )
     ]
    -->
     [ ]
  */

rule (modulo E) p_0_11111111111122[color=#ffffff, process="0",
                                   issapicrule, role='Process']:
   [
   State_11111111111122( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                         u2fkey.1
   )
   ]
  -->
   [ ]

  /*
  rule (modulo AC) p_0_11111111111122[color=#ffffff, process="0",
                                      issapicrule, role='Process']:
     [ State_11111111111122( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
    -->
     [ ]
  */

rule (modulo E) Tufchannelbtnchannelufkey_0_111111111112[color=#ffffff,
                                                         process="T(~u2f.1:channel, ~btn.1:channel, u2fkey.1)",
                                                         issapicrule, role='Process']:
   [
   State_111111111112( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                       u2fkey.1
   )
   ]
  -->
   [
   State_1111111111121( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                        u2fkey.1
   ),
   State_1111111111122( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                        u2fkey.1
   )
   ]

  /*
  rule (modulo AC) Tufchannelbtnchannelufkey_0_111111111112[color=#ffffff,
                                                            process="T(~u2f.1:channel, ~btn.1:channel, u2fkey.1)",
                                                            issapicrule, role='Process']:
     [ State_111111111112( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
    -->
     [
     State_1111111111121( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ),
     State_1111111111122( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey )
     ]
  */

rule (modulo E) inufchannelpayloadbitstring_0_1111111111121[color=#405080,
                                                            process="in(~u2f.1:channel,payload.1:bitstring);",
                                                            issapicrule, role='T']:
   [
   State_1111111111121( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                        u2fkey.1
   ),
   Message( ~u2f.1, x.2 )
   ]
  -->
   [
   Let_11111111111211( x.2, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                       u2fkey.1
   ),
   Ack( ~u2f.1, x.2 )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) inufchannelpayloadbitstring_0_1111111111121[color=#405080,
                                                               process="in(~u2f.1:channel,payload.1:bitstring);",
                                                               issapicrule, role='T']:
     [
     State_1111111111121( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ),
     Message( ~u2f, x )
     ]
    -->
     [
     Let_11111111111211( x, ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ),
     Ack( ~u2f, x )
     ]
    // loop breaker: [1]
  */

rule (modulo E) inufchannelpayloadbitstring_1_1111111111121[color=#405080,
                                                            process="in(~u2f.1:channel,payload.1:bitstring);",
                                                            issapicrule, role='T']:
   [
   Let_11111111111211( payload.1, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1,
                       pass.1, u2fkey.1
   )
   ]
  -->
   [
   State_11111111111211( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                         payload.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) inufchannelpayloadbitstring_1_1111111111121[color=#405080,
                                                               process="in(~u2f.1:channel,payload.1:bitstring);",
                                                               issapicrule, role='T']:
     [ Let_11111111111211( payload, ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey )
     ]
    -->
     [
     State_11111111111211( ~btn, ~kb, ~tls, ~u2f, log, pass, payload, u2fkey )
     ]
  */

rule (modulo E) outbtnchannelaskpress_0_11111111111211[color=#405080,
                                                       process="out(~btn.1:channel,'askpress');", issapicrule,
                                                       role='T']:
   [
   State_11111111111211( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                         payload.1, u2fkey.1
   )
   ]
  -->
   [
   Message( ~btn.1, 'askpress' ),
   Semistate_111111111112111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                              payload.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) outbtnchannelaskpress_0_11111111111211[color=#405080,
                                                          process="out(~btn.1:channel,'askpress');",
                                                          issapicrule, role='T']:
     [
     State_11111111111211( ~btn, ~kb, ~tls, ~u2f, log, pass, payload, u2fkey )
     ]
    -->
     [
     Message( ~btn, 'askpress' ),
     Semistate_111111111112111( ~btn, ~kb, ~tls, ~u2f, log, pass, payload,
                                u2fkey
     )
     ]
  */

rule (modulo E) outbtnchannelaskpress_1_11111111111211[color=#405080,
                                                       process="out(~btn.1:channel,'askpress');", issapicrule,
                                                       role='T']:
   [
   Semistate_111111111112111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                              payload.1, u2fkey.1
   ),
   Ack( ~btn.1, 'askpress' )
   ]
  -->
   [
   State_111111111112111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                          payload.1, u2fkey.1
   )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) outbtnchannelaskpress_1_11111111111211[color=#405080,
                                                          process="out(~btn.1:channel,'askpress');",
                                                          issapicrule, role='T']:
     [
     Semistate_111111111112111( ~btn, ~kb, ~tls, ~u2f, log, pass, payload,
                                u2fkey
     ),
     Ack( ~btn, 'askpress' )
     ]
    -->
     [
     State_111111111112111( ~btn, ~kb, ~tls, ~u2f, log, pass, payload, u2fkey
     )
     ]
    // loop breaker: [1]
  */

rule (modulo E) inbtnchannelpressed_0_111111111112111[color=#405080,
                                                      process="in(~btn.1:channel,'pressed');", issapicrule,
                                                      role='T']:
   [
   State_111111111112111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                          payload.1, u2fkey.1
   ),
   Message( ~btn.1, x.2 )
   ]
  -->
   [
   Let_1111111111121111( x.2, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                         payload.1, u2fkey.1
   ),
   Ack( ~btn.1, x.2 )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) inbtnchannelpressed_0_111111111112111[color=#405080,
                                                         process="in(~btn.1:channel,'pressed');", issapicrule,
                                                         role='T']:
     [
     State_111111111112111( ~btn, ~kb, ~tls, ~u2f, log, pass, payload, u2fkey
     ),
     Message( ~btn, x )
     ]
    -->
     [
     Let_1111111111121111( x, ~btn, ~kb, ~tls, ~u2f, log, pass, payload,
                           u2fkey
     ),
     Ack( ~btn, x )
     ]
    // loop breaker: [1]
  */

rule (modulo E) inbtnchannelpressed_1_111111111112111[color=#405080,
                                                      process="in(~btn.1:channel,'pressed');", issapicrule,
                                                      role='T']:
   [
   Let_1111111111121111( 'pressed', ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1,
                         pass.1, payload.1, u2fkey.1
   )
   ]
  -->
   [
   State_1111111111121111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                           payload.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) inbtnchannelpressed_1_111111111112111[color=#405080,
                                                         process="in(~btn.1:channel,'pressed');", issapicrule,
                                                         role='T']:
     [
     Let_1111111111121111( 'pressed', ~btn, ~kb, ~tls, ~u2f, log, pass,
                           payload, u2fkey
     )
     ]
    -->
     [
     State_1111111111121111( ~btn, ~kb, ~tls, ~u2f, log, pass, payload, u2fkey
     )
     ]
  */

rule (modulo E) outufchannelsignpayloadbitstringufkey_0_1111111111121111[color=#405080,
                                                                         process="out(~u2f.1:channel,sign(payload.1:bitstring, u2fkey.1));",
                                                                         issapicrule, role='T']:
   [
   State_1111111111121111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                           payload.1, u2fkey.1
   )
   ]
  -->
   [
   Message( ~u2f.1, sign(payload.1, u2fkey.1) ),
   Semistate_11111111111211111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1,
                                pass.1, payload.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) outufchannelsignpayloadbitstringufkey_0_1111111111121111[color=#405080,
                                                                            process="out(~u2f.1:channel,sign(payload.1:bitstring, u2fkey.1));",
                                                                            issapicrule, role='T']:
     [
     State_1111111111121111( ~btn, ~kb, ~tls, ~u2f, log, pass, payload, u2fkey
     )
     ]
    -->
     [
     Message( ~u2f, sign(payload, u2fkey) ),
     Semistate_11111111111211111( ~btn, ~kb, ~tls, ~u2f, log, pass, payload,
                                  u2fkey
     )
     ]
  */

rule (modulo E) outufchannelsignpayloadbitstringufkey_1_1111111111121111[color=#405080,
                                                                         process="out(~u2f.1:channel,sign(payload.1:bitstring, u2fkey.1));",
                                                                         issapicrule, role='T']:
   [
   Semistate_11111111111211111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1,
                                pass.1, payload.1, u2fkey.1
   ),
   Ack( ~u2f.1, sign(payload.1, u2fkey.1) )
   ]
  -->
   [
   State_11111111111211111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                            payload.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) outufchannelsignpayloadbitstringufkey_1_1111111111121111[color=#405080,
                                                                            process="out(~u2f.1:channel,sign(payload.1:bitstring, u2fkey.1));",
                                                                            issapicrule, role='T']:
     [
     Semistate_11111111111211111( ~btn, ~kb, ~tls, ~u2f, log, pass, payload,
                                  u2fkey
     ),
     Ack( ~u2f, sign(payload, u2fkey) )
     ]
    -->
     [
     State_11111111111211111( ~btn, ~kb, ~tls, ~u2f, log, pass, payload,
                              u2fkey
     )
     ]
  */

rule (modulo E) p_0_11111111111211111[color=#405080, process="0",
                                      issapicrule, role='T']:
   [
   State_11111111111211111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                            payload.1, u2fkey.1
   )
   ]
  -->
   [ ]

  /*
  rule (modulo AC) p_0_11111111111211111[color=#405080, process="0",
                                         issapicrule, role='T']:
     [
     State_11111111111211111( ~btn, ~kb, ~tls, ~u2f, log, pass, payload,
                              u2fkey
     )
     ]
    -->
     [ ]
  */

rule (modulo E) p_0_1111111111122[color=#ffffff, process="0",
                                  issapicrule, role='Process']:
   [
   State_1111111111122( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                        u2fkey.1
   )
   ]
  -->
   [ ]

  /*
  rule (modulo AC) p_0_1111111111122[color=#ffffff, process="0",
                                     issapicrule, role='Process']:
     [ State_1111111111122( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
    -->
     [ ]
  */

rule (modulo E) Ukbchannelbtnchannellogpass_0_11111111112[color=#ffffff,
                                                          process="U(~kb.1:channel, ~btn.1:channel, log.1, pass.1)",
                                                          issapicrule, role='Process']:
   [
   State_11111111112( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1, u2fkey.1
   )
   ]
  -->
   [
   State_111111111121( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                       u2fkey.1
   ),
   State_111111111122( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                       u2fkey.1
   )
   ]

  /*
  rule (modulo AC) Ukbchannelbtnchannellogpass_0_11111111112[color=#ffffff,
                                                             process="U(~kb.1:channel, ~btn.1:channel, log.1, pass.1)",
                                                             issapicrule, role='Process']:
     [ State_11111111112( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
    -->
     [
     State_111111111121( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ),
     State_111111111122( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey )
     ]
  */

rule (modulo E) lockEvToken_0_111111111121[color=#804067,
                                           process="lock 'EvToken';", issapicrule, role='U']:
   [
   State_111111111121( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                       u2fkey.1
   ),
   Fr( lock.1 )
   ]
  --[ Lock_1( '1', lock.1, 'EvToken' ), Lock( '1', lock.1, 'EvToken' ) ]->
   [
   State_1111111111211( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                        pass.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) lockEvToken_0_111111111121[color=#804067,
                                              process="lock 'EvToken';", issapicrule, role='U']:
     [
     State_111111111121( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ),
     Fr( lock )
     ]
    --[ Lock_1( '1', lock, 'EvToken' ), Lock( '1', lock, 'EvToken' ) ]->
     [ State_1111111111211( ~btn, ~kb, ~tls, ~u2f, lock, log, pass, u2fkey ) ]
  */

rule (modulo E) lookupEvTokenascnt_0_1111111111211[color=#804067,
                                                   process="lookup 'EvToken' as cnt.2", derivchecks,
                                                   issapicrule, role='U']:
   [
   State_1111111111211( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                        pass.1, u2fkey.1
   )
   ]
  --[ IsIn( 'EvToken', cnt.2 ) ]->
   [
   State_11111111112111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                         pass.1, u2fkey.1, cnt.2
   )
   ]

  /*
  rule (modulo AC) lookupEvTokenascnt_0_1111111111211[color=#804067,
                                                      process="lookup 'EvToken' as cnt.2", derivchecks,
                                                      issapicrule, role='U']:
     [ State_1111111111211( ~btn, ~kb, ~tls, ~u2f, lock, log, pass, u2fkey ) ]
    --[ IsIn( 'EvToken', cnt ) ]->
     [
     State_11111111112111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass, u2fkey, cnt
     )
     ]
  */

rule (modulo E) lookupEvTokenascnt_1_1111111111211[color=#804067,
                                                   process="lookup 'EvToken' as cnt.2", derivchecks,
                                                   issapicrule, role='U']:
   [
   State_1111111111211( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                        pass.1, u2fkey.1
   )
   ]
  --[ IsNotSet( 'EvToken' ) ]->
   [
   State_11111111112112( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                         pass.1, u2fkey.1
   )
   ]

  /*
  rule (modulo AC) lookupEvTokenascnt_1_1111111111211[color=#804067,
                                                      process="lookup 'EvToken' as cnt.2", derivchecks,
                                                      issapicrule, role='U']:
     [ State_1111111111211( ~btn, ~kb, ~tls, ~u2f, lock, log, pass, u2fkey ) ]
    --[ IsNotSet( 'EvToken' ) ]->
     [ State_11111111112112( ~btn, ~kb, ~tls, ~u2f, lock, log, pass, u2fkey )
     ]
  */

rule (modulo E) eventUserInitcnt_0_11111111112111[color=#804067,
                                                  process="event UserInit( cnt.2 );", issapicrule, role='U']:
   [
   State_11111111112111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                         pass.1, u2fkey.1, cnt.2
   )
   ]
  --[ UserInit( cnt.2 ) ]->
   [
   State_111111111121111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                          pass.1, u2fkey.1, cnt.2
   )
   ]

  /*
  rule (modulo AC) eventUserInitcnt_0_11111111112111[color=#804067,
                                                     process="event UserInit( cnt.2 );", issapicrule,
                                                     role='U']:
     [
     State_11111111112111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass, u2fkey, cnt
     )
     ]
    --[ UserInit( cnt ) ]->
     [
     State_111111111121111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass, u2fkey,
                            cnt
     )
     ]
  */

rule (modulo E) insertEvTokensucccnt_0_111111111121111[color=#804067,
                                                       process="insert 'EvToken',succ(cnt.2);", issapicrule,
                                                       role='U']:
   [
   State_111111111121111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                          pass.1, u2fkey.1, cnt.2
   )
   ]
  --[ Insert( 'EvToken', succ(cnt.2) ) ]->
   [
   State_1111111111211111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                           pass.1, u2fkey.1, cnt.2
   )
   ]

  /*
  rule (modulo AC) insertEvTokensucccnt_0_111111111121111[color=#804067,
                                                          process="insert 'EvToken',succ(cnt.2);",
                                                          issapicrule, role='U']:
     [
     State_111111111121111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass, u2fkey,
                            cnt
     )
     ]
    --[ Insert( 'EvToken', succ(cnt) ) ]->
     [
     State_1111111111211111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass, u2fkey,
                             cnt
     )
     ]
  */

rule (modulo E) unlockEvToken_0_1111111111211111[color=#804067,
                                                 process="unlock 'EvToken';", issapicrule, role='U']:
   [
   State_1111111111211111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                           pass.1, u2fkey.1, cnt.2
   )
   ]
  --[ Unlock_1( '1', lock.1, 'EvToken' ), Unlock( '1', lock.1, 'EvToken' )
  ]->
   [
   State_11111111112111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                            pass.1, u2fkey.1, cnt.2
   )
   ]

  /*
  rule (modulo AC) unlockEvToken_0_1111111111211111[color=#804067,
                                                    process="unlock 'EvToken';", issapicrule, role='U']:
     [
     State_1111111111211111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass, u2fkey,
                             cnt
     )
     ]
    --[ Unlock_1( '1', lock, 'EvToken' ), Unlock( '1', lock, 'EvToken' ) ]->
     [
     State_11111111112111111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass, u2fkey,
                              cnt
     )
     ]
  */

rule (modulo E) outkbchannellogpass_0_11111111112111111[color=#804067,
                                                        process="out(~kb.1:channel,<log.1, pass.1>);",
                                                        issapicrule, role='U']:
   [
   State_11111111112111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                            pass.1, u2fkey.1, cnt.2
   )
   ]
  -->
   [
   Message( ~kb.1, <log.1, pass.1> ),
   Semistate_111111111121111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1,
                                 log.1, pass.1, u2fkey.1, cnt.2
   )
   ]

  /*
  rule (modulo AC) outkbchannellogpass_0_11111111112111111[color=#804067,
                                                           process="out(~kb.1:channel,<log.1, pass.1>);",
                                                           issapicrule, role='U']:
     [
     State_11111111112111111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass, u2fkey,
                              cnt
     )
     ]
    -->
     [
     Message( ~kb, <log, pass> ),
     Semistate_111111111121111111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass,
                                   u2fkey, cnt
     )
     ]
  */

rule (modulo E) outkbchannellogpass_1_11111111112111111[color=#804067,
                                                        process="out(~kb.1:channel,<log.1, pass.1>);",
                                                        issapicrule, role='U']:
   [
   Semistate_111111111121111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1,
                                 log.1, pass.1, u2fkey.1, cnt.2
   ),
   Ack( ~kb.1, <log.1, pass.1> )
   ]
  -->
   [
   State_111111111121111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                             pass.1, u2fkey.1, cnt.2
   )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) outkbchannellogpass_1_11111111112111111[color=#804067,
                                                           process="out(~kb.1:channel,<log.1, pass.1>);",
                                                           issapicrule, role='U']:
     [
     Semistate_111111111121111111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass,
                                   u2fkey, cnt
     ),
     Ack( ~kb, <log, pass> )
     ]
    -->
     [
     State_111111111121111111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass, u2fkey,
                               cnt
     )
     ]
    // loop breaker: [1]
  */

rule (modulo E) inbtnchannelaskpress_0_111111111121111111[color=#804067,
                                                          process="in(~btn.1:channel,'askpress');",
                                                          issapicrule, role='U']:
   [
   State_111111111121111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                             pass.1, u2fkey.1, cnt.2
   ),
   Message( ~btn.1, x.3 )
   ]
  -->
   [
   Let_1111111111211111111( x.3, ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1,
                            log.1, pass.1, u2fkey.1, cnt.2
   ),
   Ack( ~btn.1, x.3 )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) inbtnchannelaskpress_0_111111111121111111[color=#804067,
                                                             process="in(~btn.1:channel,'askpress');",
                                                             issapicrule, role='U']:
     [
     State_111111111121111111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass, u2fkey,
                               cnt
     ),
     Message( ~btn, x )
     ]
    -->
     [
     Let_1111111111211111111( x, ~btn, ~kb, ~tls, ~u2f, lock, log, pass,
                              u2fkey, cnt
     ),
     Ack( ~btn, x )
     ]
    // loop breaker: [1]
  */

rule (modulo E) inbtnchannelaskpress_1_111111111121111111[color=#804067,
                                                          process="in(~btn.1:channel,'askpress');",
                                                          issapicrule, role='U']:
   [
   Let_1111111111211111111( 'askpress', ~btn.1, ~kb.1, ~tls.1, ~u2f.1,
                            lock.1, log.1, pass.1, u2fkey.1, cnt.2
   )
   ]
  -->
   [
   State_1111111111211111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                              pass.1, u2fkey.1, cnt.2
   )
   ]

  /*
  rule (modulo AC) inbtnchannelaskpress_1_111111111121111111[color=#804067,
                                                             process="in(~btn.1:channel,'askpress');",
                                                             issapicrule, role='U']:
     [
     Let_1111111111211111111( 'askpress', ~btn, ~kb, ~tls, ~u2f, lock, log,
                              pass, u2fkey, cnt
     )
     ]
    -->
     [
     State_1111111111211111111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass,
                                u2fkey, cnt
     )
     ]
  */

rule (modulo E) outbtnchannelpressed_0_1111111111211111111[color=#804067,
                                                           process="out(~btn.1:channel,'pressed');",
                                                           issapicrule, role='U']:
   [
   State_1111111111211111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                              pass.1, u2fkey.1, cnt.2
   )
   ]
  -->
   [
   Message( ~btn.1, 'pressed' ),
   Semistate_11111111112111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1,
                                   log.1, pass.1, u2fkey.1, cnt.2
   )
   ]

  /*
  rule (modulo AC) outbtnchannelpressed_0_1111111111211111111[color=#804067,
                                                              process="out(~btn.1:channel,'pressed');",
                                                              issapicrule, role='U']:
     [
     State_1111111111211111111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass,
                                u2fkey, cnt
     )
     ]
    -->
     [
     Message( ~btn, 'pressed' ),
     Semistate_11111111112111111111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass,
                                     u2fkey, cnt
     )
     ]
  */

rule (modulo E) outbtnchannelpressed_1_1111111111211111111[color=#804067,
                                                           process="out(~btn.1:channel,'pressed');",
                                                           issapicrule, role='U']:
   [
   Semistate_11111111112111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1,
                                   log.1, pass.1, u2fkey.1, cnt.2
   ),
   Ack( ~btn.1, 'pressed' )
   ]
  -->
   [
   State_11111111112111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                               pass.1, u2fkey.1, cnt.2
   )
   ]

  /*
  rule (modulo AC) outbtnchannelpressed_1_1111111111211111111[color=#804067,
                                                              process="out(~btn.1:channel,'pressed');",
                                                              issapicrule, role='U']:
     [
     Semistate_11111111112111111111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass,
                                     u2fkey, cnt
     ),
     Ack( ~btn, 'pressed' )
     ]
    -->
     [
     State_11111111112111111111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass,
                                 u2fkey, cnt
     )
     ]
  */

rule (modulo E) p_0_11111111112111111111[color=#804067, process="0",
                                         issapicrule, role='U']:
   [
   State_11111111112111111111( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                               pass.1, u2fkey.1, cnt.2
   )
   ]
  -->
   [ ]

  /*
  rule (modulo AC) p_0_11111111112111111111[color=#804067, process="0",
                                            issapicrule, role='U']:
     [
     State_11111111112111111111( ~btn, ~kb, ~tls, ~u2f, lock, log, pass,
                                 u2fkey, cnt
     )
     ]
    -->
     [ ]
  */

rule (modulo E) p_0_11111111112112[color=#804067, process="0",
                                   issapicrule, role='U']:
   [
   State_11111111112112( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, lock.1, log.1,
                         pass.1, u2fkey.1
   )
   ]
  -->
   [ ]

  /*
  rule (modulo AC) p_0_11111111112112[color=#804067, process="0",
                                      issapicrule, role='U']:
     [ State_11111111112112( ~btn, ~kb, ~tls, ~u2f, lock, log, pass, u2fkey )
     ]
    -->
     [ ]
  */

rule (modulo E) p_0_111111111122[color=#ffffff, process="0", issapicrule,
                                 role='Process']:
   [
   State_111111111122( ~btn.1, ~kb.1, ~tls.1, ~u2f.1, log.1, pass.1,
                       u2fkey.1
   )
   ]
  -->
   [ ]

  /*
  rule (modulo AC) p_0_111111111122[color=#ffffff, process="0",
                                    issapicrule, role='Process']:
     [ State_111111111122( ~btn, ~kb, ~tls, ~u2f, log, pass, u2fkey ) ]
    -->
     [ ]
  */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒ (∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1))"
  // safety formula

restriction predicate_eq:
  "∀ #i a b. (Pred_Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_Not_Eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction locking_0:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_0( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_0( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_1:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_1( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_1( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

/*
WARNING: the following wellformedness checks failed!

Wellformedness-error in Process
  There is an unlock that cannot be matched with a lock.

Derivation Checks
=================

  Derivation checks timed out.
  Use --derivcheck-timeout=INT to configure timeout.
  Set to 0 to deactivate for no timeout.
*/

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.4
Git revision: a288673cab40b1e997ba23b077ef491d39c2bef6 (with uncommited changes), branch: fix-issue713
Compiled at: 2025-06-18 14:31:09.981542 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/sapic/fast/feature-secret-channel/U2F.spthy

  output:          examples/sapic/fast/feature-secret-channel/U2F.spthy.tmp
  processing time: 116.93s
  
  WARNING: 2 wellformedness check failed!
           The analysis results might be wrong!
  
  auth (all-traces): verified (1097 steps)

==============================================================================
*/
